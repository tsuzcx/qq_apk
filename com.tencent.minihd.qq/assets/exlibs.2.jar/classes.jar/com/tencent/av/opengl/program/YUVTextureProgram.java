package com.tencent.av.opengl.program;

import com.tencent.av.opengl.shader.AttributeShaderParameter;
import com.tencent.av.opengl.shader.ShaderParameter;
import com.tencent.av.opengl.shader.UniformShaderParameter;

public class YUVTextureProgram
  extends TextureProgram
{
  private static final String angle = "angle";
  private static final String distortOri = "distortOri";
  private static final String distortType = "distortType";
  public static final int index_distortAngle = 18;
  public static final int index_distortOri = 17;
  public static final int index_distortType = 16;
  public static final int index_isModel = 12;
  public static final int index_range = 15;
  public static final int index_stride_x = 13;
  public static final int index_stride_y = 14;
  private static final String isModel = "isModel";
  private static final String range = "range";
  private static final String stride_x = "stride_x";
  private static final String stride_y = "stride_y";
  static final String textureFragmentShader = "precision mediump float;varying vec2 vTextureCoord ;varying vec2 vTextureCoordModel;uniform float uAlpha;uniform float stride_x;uniform float stride_y;uniform float range;uniform int   distortType;uniform int   distortOri;uniform int   angle;uniform int yuvFormat;uniform int isModel;uniform sampler2D uTextureSampler0;uniform sampler2D uTextureSampler1;uniform sampler2D uTextureSampler2;uniform sampler2D uTextureSampler3;uniform mat4 colorMat;void main() {  vec3 yuvData;float x1 = vTextureCoord.x;float y1 = vTextureCoord.y;vec2 distortCoord = vec2(x1,y1);bool isEmpty = false;if (range != 0.0){\tfloat real_range;\tif (angle == 1 || angle == 3) {\t\tif (distortType == 0)\t\t{\t\t\treal_range = 4.0 * range * (x1 - 0.5) * (x1 - 0.5);\t\t}\t\telse\t\t{\t\t\treal_range = 4.0 * range * x1 * (1.0 - x1);\t\t}\t\tif ((distortOri == distortType))\t\t{\t\t\tif (y1 > 1.0 - real_range - stride_y + 2.0 * stride_y * real_range || y1 < stride_y)\t\t\t{\t\t\t\tisEmpty = true;\t\t\t}\t\t\telse\t\t\t{\t\t\t\tfloat y2 = (y1 - stride_y * real_range) / (1.0 - real_range);\t\t\t\tdistortCoord = vec2(x1,y2);\t\t\t}\t\t}\t\telse\t\t{\t\t\tif (y1 <  real_range + stride_y - 2.0 * stride_y * real_range || y1 > 1.0 - stride_y)\t\t\t{\t\t\t\tisEmpty = true;\t\t\t}\t\t\telse\t\t\t{\t\t\t\tfloat y2 = (y1 - real_range + stride_y * real_range) / (1.0 - real_range);\t\t\t\tdistortCoord = vec2(x1,y2);\t\t\t}\t\t}\t }  else {\t\tif (distortType == 0)\t\t{\t\t\treal_range = 4.0 * range * (y1 - 0.5) * (y1 - 0.5);\t\t}\t\telse\t\t{\t\t\treal_range = 4.0 * range * y1 * (1.0 - y1);\t\t}\t\tif ((distortOri == distortType))\t\t{\t\t\tif (x1 > 1.0 - real_range - stride_x + 2.0 * stride_x * real_range || x1 < stride_x)\t\t\t{\t\t\t\tisEmpty = true;\t\t\t}\t\t\telse\t\t\t{\t\t\t\tfloat x2 = (x1 - stride_x * real_range) / (1.0 - real_range);\t\t\t\tdistortCoord = vec2(x2,y1);\t\t\t}\t\t}\t\telse\t\t{\t\t\tif (x1 <  real_range + stride_x - 2.0 * stride_x * real_range || x1 > 1.0 - stride_x)\t\t\t{\t\t\t\tisEmpty = true;\t\t\t}\t\t\telse\t\t\t{\t\t\t\tfloat x2 = (x1 - real_range + stride_x * real_range) / (1.0 - real_range);\t\t\t\tdistortCoord = vec2(x2,y1);\t\t\t}\t\t}  }} if (isEmpty){\tgl_FragColor = vec4(0,0,0,0);}else{  yuvData.x = texture2D(uTextureSampler0, distortCoord).x;\tif(yuvFormat==1||yuvFormat==2){  \tvec2 uv = texture2D(uTextureSampler1, distortCoord).ra;  \tyuvData.y = uv.x;  \tyuvData.z = uv.y;}else if(yuvFormat==3){  \tvec2 uv = texture2D(uTextureSampler1, distortCoord).ra;  \tyuvData.z = uv.x;  \tyuvData.y = uv.y;}else{ \tyuvData.y = texture2D(uTextureSampler1, distortCoord).x;  \tyuvData.z = texture2D(uTextureSampler2, distortCoord).x;}  vec4 rgbData =  colorMat * vec4(yuvData,1.0);gl_FragColor = vec4 (rgbData.xyz, 1.0) * uAlpha;}if(isModel==1){\t\tgl_FragColor.a=texture2D(uTextureSampler3, vTextureCoordModel).a;}}";
  static final String textureVertexShader = "uniform mat4 uMatrix;uniform mat4 uTextureMatrix;attribute vec2 aPosition;varying vec2 vTextureCoord;varying vec2 vTextureCoordModel;void main() {vec4 pos = vec4(aPosition, 0.0, 1.0);gl_Position = uMatrix * pos;vTextureCoord  = (uTextureMatrix * (pos+vec4(0.5,0.5,0.0,0.0))).xy;  vTextureCoordModel = aPosition + vec2(0.5,0.5);}";
  
  public YUVTextureProgram()
  {
    super("uniform mat4 uMatrix;uniform mat4 uTextureMatrix;attribute vec2 aPosition;varying vec2 vTextureCoord;varying vec2 vTextureCoordModel;void main() {vec4 pos = vec4(aPosition, 0.0, 1.0);gl_Position = uMatrix * pos;vTextureCoord  = (uTextureMatrix * (pos+vec4(0.5,0.5,0.0,0.0))).xy;  vTextureCoordModel = aPosition + vec2(0.5,0.5);}", "precision mediump float;varying vec2 vTextureCoord ;varying vec2 vTextureCoordModel;uniform float uAlpha;uniform float stride_x;uniform float stride_y;uniform float range;uniform int   distortType;uniform int   distortOri;uniform int   angle;uniform int yuvFormat;uniform int isModel;uniform sampler2D uTextureSampler0;uniform sampler2D uTextureSampler1;uniform sampler2D uTextureSampler2;uniform sampler2D uTextureSampler3;uniform mat4 colorMat;void main() {  vec3 yuvData;float x1 = vTextureCoord.x;float y1 = vTextureCoord.y;vec2 distortCoord = vec2(x1,y1);bool isEmpty = false;if (range != 0.0){\tfloat real_range;\tif (angle == 1 || angle == 3) {\t\tif (distortType == 0)\t\t{\t\t\treal_range = 4.0 * range * (x1 - 0.5) * (x1 - 0.5);\t\t}\t\telse\t\t{\t\t\treal_range = 4.0 * range * x1 * (1.0 - x1);\t\t}\t\tif ((distortOri == distortType))\t\t{\t\t\tif (y1 > 1.0 - real_range - stride_y + 2.0 * stride_y * real_range || y1 < stride_y)\t\t\t{\t\t\t\tisEmpty = true;\t\t\t}\t\t\telse\t\t\t{\t\t\t\tfloat y2 = (y1 - stride_y * real_range) / (1.0 - real_range);\t\t\t\tdistortCoord = vec2(x1,y2);\t\t\t}\t\t}\t\telse\t\t{\t\t\tif (y1 <  real_range + stride_y - 2.0 * stride_y * real_range || y1 > 1.0 - stride_y)\t\t\t{\t\t\t\tisEmpty = true;\t\t\t}\t\t\telse\t\t\t{\t\t\t\tfloat y2 = (y1 - real_range + stride_y * real_range) / (1.0 - real_range);\t\t\t\tdistortCoord = vec2(x1,y2);\t\t\t}\t\t}\t }  else {\t\tif (distortType == 0)\t\t{\t\t\treal_range = 4.0 * range * (y1 - 0.5) * (y1 - 0.5);\t\t}\t\telse\t\t{\t\t\treal_range = 4.0 * range * y1 * (1.0 - y1);\t\t}\t\tif ((distortOri == distortType))\t\t{\t\t\tif (x1 > 1.0 - real_range - stride_x + 2.0 * stride_x * real_range || x1 < stride_x)\t\t\t{\t\t\t\tisEmpty = true;\t\t\t}\t\t\telse\t\t\t{\t\t\t\tfloat x2 = (x1 - stride_x * real_range) / (1.0 - real_range);\t\t\t\tdistortCoord = vec2(x2,y1);\t\t\t}\t\t}\t\telse\t\t{\t\t\tif (x1 <  real_range + stride_x - 2.0 * stride_x * real_range || x1 > 1.0 - stride_x)\t\t\t{\t\t\t\tisEmpty = true;\t\t\t}\t\t\telse\t\t\t{\t\t\t\tfloat x2 = (x1 - real_range + stride_x * real_range) / (1.0 - real_range);\t\t\t\tdistortCoord = vec2(x2,y1);\t\t\t}\t\t}  }} if (isEmpty){\tgl_FragColor = vec4(0,0,0,0);}else{  yuvData.x = texture2D(uTextureSampler0, distortCoord).x;\tif(yuvFormat==1||yuvFormat==2){  \tvec2 uv = texture2D(uTextureSampler1, distortCoord).ra;  \tyuvData.y = uv.x;  \tyuvData.z = uv.y;}else if(yuvFormat==3){  \tvec2 uv = texture2D(uTextureSampler1, distortCoord).ra;  \tyuvData.z = uv.x;  \tyuvData.y = uv.y;}else{ \tyuvData.y = texture2D(uTextureSampler1, distortCoord).x;  \tyuvData.z = texture2D(uTextureSampler2, distortCoord).x;}  vec4 rgbData =  colorMat * vec4(yuvData,1.0);gl_FragColor = vec4 (rgbData.xyz, 1.0) * uAlpha;}if(isModel==1){\t\tgl_FragColor.a=texture2D(uTextureSampler3, vTextureCoordModel).a;}}", new ShaderParameter[] { new AttributeShaderParameter("aPosition"), new UniformShaderParameter("uMatrix"), new UniformShaderParameter("uAlpha"), new UniformShaderParameter("uTextureMatrix"), new UniformShaderParameter("uTextureSampler0"), new UniformShaderParameter("uTextureSampler1"), new UniformShaderParameter("uTextureSampler2"), new UniformShaderParameter("fWidth"), new UniformShaderParameter("fHeight"), new UniformShaderParameter("colorMat"), new UniformShaderParameter("yuvFormat"), new UniformShaderParameter("uTextureSampler3"), new UniformShaderParameter("isModel"), new UniformShaderParameter("stride_x"), new UniformShaderParameter("stride_y"), new UniformShaderParameter("range"), new UniformShaderParameter("distortType"), new UniformShaderParameter("distortOri"), new UniformShaderParameter("angle") }, true);
  }
}


/* Location:           L:\local\mybackup\temp\qq_apk\com.tencent.minihd.qq\assets\exlibs.2.jar\classes.jar
 * Qualified Name:     com.tencent.av.opengl.program.YUVTextureProgram
 * JD-Core Version:    0.7.0.1
 */