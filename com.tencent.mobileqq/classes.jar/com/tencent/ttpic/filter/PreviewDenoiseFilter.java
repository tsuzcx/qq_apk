package com.tencent.ttpic.filter;

import com.tencent.aekit.openrender.UniformParam.FloatParam;
import com.tencent.aekit.openrender.UniformParam.TextureParam;
import com.tencent.filter.BaseFilter;

public class PreviewDenoiseFilter
  extends BaseFilter
{
  public static final String FRAGMENT_SHADER = "varying highp vec2 textureCoordinate;\n varying highp vec2 textureCoordsLU;\n varying highp vec2 textureCoordsU;\n varying highp vec2 textureCoordsRU;\n varying highp vec2 textureCoordsL;\n varying highp vec2 textureCoordsR;\n varying highp vec2 textureCoordsLD;\n varying highp vec2 textureCoordsD;\n varying highp vec2 textureCoordsRD;\n uniform sampler2D inputImageTexture;\n uniform sampler2D inputImageTexture2;\n uniform sampler2D inputImageTexture3;\n uniform sampler2D inputImageTexture4;\n uniform lowp float blurAlpha;\n \n const mediump vec3 luminanceWeighting = vec3(0.2125, 0.7154, 0.0721);\n \n#if 0\n// lowp float factor1 = 2.782;\n// lowp float factor2 = 1.131;\n// lowp float factor3 = 1.158;\n// lowp float factor4 = 2.901;\n// lowp float factor5 = 0.979;\n// lowp float factor6 = 0.639;\n// lowp float factor7 = 0.963;\n//\n// lowp vec3 ContrastSaturationBrightness(lowp vec3 color, lowp float brt, lowp float sat, lowp float con) {\n//     const lowp float AvgLumR = 0.5;\n//     const lowp float AvgLumG = 0.5;\n//     const lowp float AvgLumB = 0.5;\n//     const lowp vec3 LumCoeff = vec3(0.2125, 0.7154, 0.0721);\n//     lowp vec3 AvgLumin = vec3(AvgLumR, AvgLumG, AvgLumB);\n//     lowp vec3 brtColor = color * brt;\n//     lowp vec3 intensity = vec3(dot(brtColor, LumCoeff));\n//     lowp vec3 satColor = mix(intensity, brtColor, sat);\n//     lowp vec3 conColor = mix(AvgLumin, satColor, con);\n//     return conColor;\n// }\n#endif\n \n lowp vec4 denoiseColor(sampler2D curFrameTex, sampler2D lastFrameTex) {\n     lowp vec4 curColor = texture2D(curFrameTex, textureCoordinate);\n     lowp vec4 curColorLU = texture2D(curFrameTex, textureCoordsLU);\n     lowp vec4 curColorU = texture2D(curFrameTex, textureCoordsU);\n     lowp vec4 curColorRU = texture2D(curFrameTex, textureCoordsRU);\n     lowp vec4 curColorL = texture2D(curFrameTex, textureCoordsL);\n     lowp vec4 curColorR = texture2D(curFrameTex, textureCoordsR);\n     lowp vec4 curColorLD = texture2D(curFrameTex, textureCoordsLD);\n     lowp vec4 curColorD = texture2D(curFrameTex, textureCoordsD);\n     lowp vec4 curColorRD = texture2D(curFrameTex, textureCoordsRD);\n     highp vec3 curMean = (curColor.rgb + curColorLU.rgb + curColorU.rgb + curColorRU.rgb + curColorL.rgb + curColorR.rgb + curColorLD.rgb + curColorD.rgb + curColorRD.rgb) / 9.0;\n     highp float curLuminance = dot(curMean.rgb, luminanceWeighting);\n     \n     lowp vec4 lastColor = texture2D(lastFrameTex, textureCoordinate);\n     lowp vec4 lastColorLU = texture2D(lastFrameTex, textureCoordsLU);\n     lowp vec4 lastColorU = texture2D(lastFrameTex, textureCoordsU);\n     lowp vec4 lastColorRU = texture2D(lastFrameTex, textureCoordsRU);\n     lowp vec4 lastColorL = texture2D(lastFrameTex, textureCoordsL);\n     lowp vec4 lastColorR = texture2D(lastFrameTex, textureCoordsR);\n     lowp vec4 lastColorLD = texture2D(lastFrameTex, textureCoordsLD);\n     lowp vec4 lastColorD = texture2D(lastFrameTex, textureCoordsD);\n     lowp vec4 lastColorRD = texture2D(lastFrameTex, textureCoordsRD);\n     highp vec3 lastMean = (lastColor.rgb + lastColorLU.rgb + lastColorU.rgb + lastColorRU.rgb + lastColorL.rgb + lastColorR.rgb + lastColorLD.rgb + lastColorD.rgb + lastColorRD.rgb) / 9.0;\n     highp float lastLuminance = dot(lastMean.rgb, luminanceWeighting);\n     \n     highp float lumDelta = abs(curLuminance - lastLuminance);\n     highp float lumWeight = 1.0 + 0.02 * lumDelta * lumDelta * 255.0 * 255.0;\n     highp float mixAlpha = lumWeight / (lumWeight + 1.5);\n     lowp vec4 resultColor = mix(lastColor, curColor, mixAlpha);\n     return resultColor;\n }\n \n void main() {\n     lowp vec4 iColor = denoiseColor(inputImageTexture, inputImageTexture4);\n     lowp vec4 meanColor = texture2D(inputImageTexture2, textureCoordinate);\n     lowp vec4 varColor = texture2D(inputImageTexture3, textureCoordinate);\n     \n     mediump float kMin = 1.0 - varColor.g;\n     lowp vec3 smoothColor = mix(iColor.rgb, meanColor.rgb, blurAlpha * 0.72 * kMin);\n     \n     gl_FragColor = vec4(smoothColor, iColor.a);\n }";
  public static final String VERTEX_SHADER = "attribute vec4 position;\n attribute vec4 inputTextureCoordinate;\n attribute vec4 inputTextureCoordinate2;\n attribute vec4 inputTextureCoordinate3;\n \n uniform float stepX;\n uniform float stepY;\n \n varying vec2 textureCoordinate;\n varying vec2 textureCoordsLU;\n varying vec2 textureCoordsU;\n varying vec2 textureCoordsRU;\n varying vec2 textureCoordsL;\n varying vec2 textureCoordsR;\n varying vec2 textureCoordsLD;\n varying vec2 textureCoordsD;\n varying vec2 textureCoordsRD;\n \n void main()\n {\n     gl_Position = position;\n     textureCoordinate = inputTextureCoordinate.xy;\n     textureCoordsLU = vec2(textureCoordinate.x-stepX, textureCoordinate.y+stepY);\n     textureCoordsU = vec2(textureCoordinate.x, textureCoordinate.y+stepY);\n     textureCoordsRU = vec2(textureCoordinate.x+stepX, textureCoordinate.y+stepY);\n     textureCoordsL = vec2(textureCoordinate.x-stepX, textureCoordinate.y);\n     textureCoordsR = vec2(textureCoordinate.x+stepX, textureCoordinate.y);\n     textureCoordsLD = vec2(textureCoordinate.x-stepX, textureCoordinate.y-stepY);\n     textureCoordsD = vec2(textureCoordinate.x, textureCoordinate.y-stepY);\n     textureCoordsRD = vec2(textureCoordinate.x+stepX, textureCoordinate.y-stepY);\n }";
  private float blurAlpha = 0.5F;
  
  public PreviewDenoiseFilter()
  {
    super("attribute vec4 position;\n attribute vec4 inputTextureCoordinate;\n attribute vec4 inputTextureCoordinate2;\n attribute vec4 inputTextureCoordinate3;\n \n uniform float stepX;\n uniform float stepY;\n \n varying vec2 textureCoordinate;\n varying vec2 textureCoordsLU;\n varying vec2 textureCoordsU;\n varying vec2 textureCoordsRU;\n varying vec2 textureCoordsL;\n varying vec2 textureCoordsR;\n varying vec2 textureCoordsLD;\n varying vec2 textureCoordsD;\n varying vec2 textureCoordsRD;\n \n void main()\n {\n     gl_Position = position;\n     textureCoordinate = inputTextureCoordinate.xy;\n     textureCoordsLU = vec2(textureCoordinate.x-stepX, textureCoordinate.y+stepY);\n     textureCoordsU = vec2(textureCoordinate.x, textureCoordinate.y+stepY);\n     textureCoordsRU = vec2(textureCoordinate.x+stepX, textureCoordinate.y+stepY);\n     textureCoordsL = vec2(textureCoordinate.x-stepX, textureCoordinate.y);\n     textureCoordsR = vec2(textureCoordinate.x+stepX, textureCoordinate.y);\n     textureCoordsLD = vec2(textureCoordinate.x-stepX, textureCoordinate.y-stepY);\n     textureCoordsD = vec2(textureCoordinate.x, textureCoordinate.y-stepY);\n     textureCoordsRD = vec2(textureCoordinate.x+stepX, textureCoordinate.y-stepY);\n }", "varying highp vec2 textureCoordinate;\n varying highp vec2 textureCoordsLU;\n varying highp vec2 textureCoordsU;\n varying highp vec2 textureCoordsRU;\n varying highp vec2 textureCoordsL;\n varying highp vec2 textureCoordsR;\n varying highp vec2 textureCoordsLD;\n varying highp vec2 textureCoordsD;\n varying highp vec2 textureCoordsRD;\n uniform sampler2D inputImageTexture;\n uniform sampler2D inputImageTexture2;\n uniform sampler2D inputImageTexture3;\n uniform sampler2D inputImageTexture4;\n uniform lowp float blurAlpha;\n \n const mediump vec3 luminanceWeighting = vec3(0.2125, 0.7154, 0.0721);\n \n#if 0\n// lowp float factor1 = 2.782;\n// lowp float factor2 = 1.131;\n// lowp float factor3 = 1.158;\n// lowp float factor4 = 2.901;\n// lowp float factor5 = 0.979;\n// lowp float factor6 = 0.639;\n// lowp float factor7 = 0.963;\n//\n// lowp vec3 ContrastSaturationBrightness(lowp vec3 color, lowp float brt, lowp float sat, lowp float con) {\n//     const lowp float AvgLumR = 0.5;\n//     const lowp float AvgLumG = 0.5;\n//     const lowp float AvgLumB = 0.5;\n//     const lowp vec3 LumCoeff = vec3(0.2125, 0.7154, 0.0721);\n//     lowp vec3 AvgLumin = vec3(AvgLumR, AvgLumG, AvgLumB);\n//     lowp vec3 brtColor = color * brt;\n//     lowp vec3 intensity = vec3(dot(brtColor, LumCoeff));\n//     lowp vec3 satColor = mix(intensity, brtColor, sat);\n//     lowp vec3 conColor = mix(AvgLumin, satColor, con);\n//     return conColor;\n// }\n#endif\n \n lowp vec4 denoiseColor(sampler2D curFrameTex, sampler2D lastFrameTex) {\n     lowp vec4 curColor = texture2D(curFrameTex, textureCoordinate);\n     lowp vec4 curColorLU = texture2D(curFrameTex, textureCoordsLU);\n     lowp vec4 curColorU = texture2D(curFrameTex, textureCoordsU);\n     lowp vec4 curColorRU = texture2D(curFrameTex, textureCoordsRU);\n     lowp vec4 curColorL = texture2D(curFrameTex, textureCoordsL);\n     lowp vec4 curColorR = texture2D(curFrameTex, textureCoordsR);\n     lowp vec4 curColorLD = texture2D(curFrameTex, textureCoordsLD);\n     lowp vec4 curColorD = texture2D(curFrameTex, textureCoordsD);\n     lowp vec4 curColorRD = texture2D(curFrameTex, textureCoordsRD);\n     highp vec3 curMean = (curColor.rgb + curColorLU.rgb + curColorU.rgb + curColorRU.rgb + curColorL.rgb + curColorR.rgb + curColorLD.rgb + curColorD.rgb + curColorRD.rgb) / 9.0;\n     highp float curLuminance = dot(curMean.rgb, luminanceWeighting);\n     \n     lowp vec4 lastColor = texture2D(lastFrameTex, textureCoordinate);\n     lowp vec4 lastColorLU = texture2D(lastFrameTex, textureCoordsLU);\n     lowp vec4 lastColorU = texture2D(lastFrameTex, textureCoordsU);\n     lowp vec4 lastColorRU = texture2D(lastFrameTex, textureCoordsRU);\n     lowp vec4 lastColorL = texture2D(lastFrameTex, textureCoordsL);\n     lowp vec4 lastColorR = texture2D(lastFrameTex, textureCoordsR);\n     lowp vec4 lastColorLD = texture2D(lastFrameTex, textureCoordsLD);\n     lowp vec4 lastColorD = texture2D(lastFrameTex, textureCoordsD);\n     lowp vec4 lastColorRD = texture2D(lastFrameTex, textureCoordsRD);\n     highp vec3 lastMean = (lastColor.rgb + lastColorLU.rgb + lastColorU.rgb + lastColorRU.rgb + lastColorL.rgb + lastColorR.rgb + lastColorLD.rgb + lastColorD.rgb + lastColorRD.rgb) / 9.0;\n     highp float lastLuminance = dot(lastMean.rgb, luminanceWeighting);\n     \n     highp float lumDelta = abs(curLuminance - lastLuminance);\n     highp float lumWeight = 1.0 + 0.02 * lumDelta * lumDelta * 255.0 * 255.0;\n     highp float mixAlpha = lumWeight / (lumWeight + 1.5);\n     lowp vec4 resultColor = mix(lastColor, curColor, mixAlpha);\n     return resultColor;\n }\n \n void main() {\n     lowp vec4 iColor = denoiseColor(inputImageTexture, inputImageTexture4);\n     lowp vec4 meanColor = texture2D(inputImageTexture2, textureCoordinate);\n     lowp vec4 varColor = texture2D(inputImageTexture3, textureCoordinate);\n     \n     mediump float kMin = 1.0 - varColor.g;\n     lowp vec3 smoothColor = mix(iColor.rgb, meanColor.rgb, blurAlpha * 0.72 * kMin);\n     \n     gl_FragColor = vec4(smoothColor, iColor.a);\n }");
    initParams();
  }
  
  public float getBlurAlpha()
  {
    return this.blurAlpha;
  }
  
  public void initParams()
  {
    addParam(new UniformParam.FloatParam("blurAlpha", this.blurAlpha));
    addParam(new UniformParam.FloatParam("stepX", 0.002777778F));
    addParam(new UniformParam.FloatParam("stepY", 0.002083333F));
    addParam(new UniformParam.TextureParam("inputImageTexture2", 0, 33986));
    addParam(new UniformParam.TextureParam("inputImageTexture3", 0, 33987));
    addParam(new UniformParam.TextureParam("inputImageTexture4", 0, 33988));
  }
  
  public void updateBlurAlpha(float paramFloat)
  {
    this.blurAlpha = paramFloat;
    addParam(new UniformParam.FloatParam("blurAlpha", paramFloat));
  }
  
  public void updateSize(float paramFloat1, float paramFloat2)
  {
    addParam(new UniformParam.FloatParam("stepX", 1.0F / paramFloat1));
    addParam(new UniformParam.FloatParam("stepY", 1.0F / paramFloat2));
  }
  
  public void updateTextures(int paramInt1, int paramInt2, int paramInt3)
  {
    addParam(new UniformParam.TextureParam("inputImageTexture2", paramInt1, 33986));
    addParam(new UniformParam.TextureParam("inputImageTexture3", paramInt2, 33987));
    addParam(new UniformParam.TextureParam("inputImageTexture4", paramInt3, 33988));
  }
}


/* Location:           L:\local\mybackup\temp\qq_apk\com.tencent.mobileqq\classes10.jar
 * Qualified Name:     com.tencent.ttpic.filter.PreviewDenoiseFilter
 * JD-Core Version:    0.7.0.1
 */