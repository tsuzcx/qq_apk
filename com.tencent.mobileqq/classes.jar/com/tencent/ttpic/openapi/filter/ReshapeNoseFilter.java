package com.tencent.ttpic.openapi.filter;

import android.graphics.PointF;
import com.tencent.aekit.openrender.AEOpenRenderConfig.DRAW_MODE;
import com.tencent.aekit.openrender.UniformParam.FloatParam;
import com.tencent.aekit.openrender.UniformParam.FloatsParam;
import com.tencent.aekit.openrender.internal.VideoFilterBase;
import com.tencent.ttpic.openapi.util.VideoMaterialUtil;
import java.util.List;
import java.util.Map;

public class ReshapeNoseFilter
  extends VideoFilterBase
{
  public static final String FRAGMENT_SHADER_NORMAL = "#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float; //支持高精度，限定浮点型为高精度\n#else\n    precision mediump float; //不支持高精度，限定浮点型为中精度\n#endif\n\nvarying vec2 textureCoordinate;\nuniform sampler2D inputImageTexture;\nvoid main()\n{\n    //gl_FragColor = vec4(inputTextureCoordinate.xy, vec2(0.0, 1.0));\n\n    //vec4 color = vec4(textureCoordinate.x*8.0+0.5, textureCoordinate.y*8.0+0.5, 0.5, 1.0);\n    //gl_FragColor = color;\n\n    //gl_FragColor = vec4(textureCoordinate, textureCoordinate.x, 1.0);\n\n    gl_FragColor = texture2D(inputImageTexture, textureCoordinate);\n}";
  public static final String FRAGMENT_SHADER_VTF = "#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float; //支持高精度，限定浮点型为高精度\n#else\n    precision mediump float; //不支持高精度，限定浮点型为中精度\n#endif\n\nvarying vec2 textureCoordinate;\nuniform sampler2D inputImageTexture;\nvoid main()\n{\n\n    //vec2 diffPosition = textureCoordinate;\n    //float ddx = (diffPosition.x + 1.0) / 2.0;\n    //float ddy = (diffPosition.y + 1.0) / 2.0;\n    //diffPosition = vec2(ddx,ddy);\n    //vec2 a = fract(diffPosition * 255.0 / 256.0);\n    //vec2 b = fract(diffPosition * 255.0 * 255.0 / 256.0);\n    //gl_FragColor = vec4(a,b);\n\n    // 新版的 shader 颜色通道中记录的是位移偏移量，只有在最后 combinedFilter 才最终将所有 filter 的位移量叠加，去图上取点。这样的好处是：\n    // 1. 只有 128 * 128 个点\n    // 2. smoothstep 会更平滑，128 * 128 个点取插值，原来的处理方法会使像素点变模糊\n    // 3. 两个矩形交叠的地方，位移处理的先后顺序不影响结果（不能说这是好还是坏，因为 PS 的液化是作用在原图上的）\n\n    // 至于此处要改为 * 255 再 / 255 是为了提升精度（浮点纹理 iOS 不支持，而一个字节只能表示 256 个不同值）\n    // 本来小奇使用了浮点纹理，但是发现有机型不支持，不用浮点纹理又精度不够，所以采用这个方法，变成2个字节表示一个值，提升了精度。\n    vec2 diffPosition = textureCoordinate;\n    diffPosition = 0.5 * (diffPosition + 1.0) * 255.0;  // 0.5 * (diffPosition + 1.0) 是将(-1, 1)间的值转换到(0, 1)，\n    vec2 a = floor(diffPosition) / 255.0;\n    vec2 b = fract(diffPosition);\n    gl_FragColor = vec4(a, b);\n\n\n    //vec2 diffPosition = textureCoordinate;\n    //diffPosition = 0.5 * (diffPosition + 1.0) * 256.0;\n    //vec2 a = floor(diffPosition) / 256.0;\n    //vec2 b = fract(diffPosition);\n    //gl_FragColor = vec4(a, b);\n}\n";
  public static final String VERTEX_SHADER_NORMAL = "//uniform highp mat4 projection;\n//uniform highp mat4 faceFrame;\n//uniform highp mat4 stableToImage;\nprecision highp float;\nuniform vec3 nose3DCenter; // 鼻子中心\nuniform vec2 nosePlainSize; //\nuniform vec3 nostrilsCenter; // 鼻孔\nuniform vec2 nostrilsPlaneSize; // 两鼻孔之间？\nuniform vec3 noseTipCenter;\nuniform vec2 noseTipPlaneSize;\nuniform vec3 noseBottomCenter;\n\nuniform vec3 lipsCenter;\nuniform vec2 lipsPlainSize;\nuniform vec2 leftEyePlainSize;\nuniform vec3 leftEyeCenter;\nuniform vec2 rightEyePlainSize;\nuniform vec3 rightEyeCenter;\n\nuniform float noseSize;\nuniform float noseOutlineWidth;\nuniform float noseBridgeWidth;\nuniform float nosePosition;\nuniform float noseTipSize;\nuniform vec3 angles; // angles.x: pitch, angles.y: yaw, angles.z: roll\nuniform vec2 size;\n\nattribute vec4 position;\n//attribute float faceIndex;\n//attribute float depthValue;\nvarying vec2 textureCoordinate;\n\nuniform sampler2D inputImageTexture;\n\nfloat my_smoothstep(float edge0, float edge1, float x) {\n    float t = clamp((x - edge0) / (edge1 - edge0), 0.0, 1.0);\n    return t * t * (3.0 - 2.0 * t);\n}\n\nfloat getEllipseMask(in vec2 sigmaScaling, in vec2 point,in vec2 center, in vec2 boundingSize, float a1, float a2) {\n    // un-normalization\n    boundingSize = boundingSize * size;\n    point = point * size;\n    center = center * size;\n\n    float cos_t = cos(angles.z);\n    float sin_t = sin(angles.z);\n    vec2 translate = (point - center);\n    // rotate and scale\n    vec2 v = vec2(dot(translate, vec2(cos_t, sin_t)), dot(translate, vec2(-sin_t, cos_t))) * sigmaScaling;\n\n    float d2 = sqrt(dot(v / boundingSize, v / boundingSize));\n\n    return 1.0 - my_smoothstep(a1, a2, d2);\n}\n\nfloat getNoseMask() {\n    const vec2 sigmaScaling = vec2(1.0, 1.5);\n    return getEllipseMask(sigmaScaling, position.xy, nose3DCenter.xy, nosePlainSize, 0.5, 1.2);\n}\nfloat getNostrilsBridgetMask() {\n    const vec2 sigmaScaling = vec2(0.3, 0.3);\n    return getEllipseMask(sigmaScaling, position.xy, nostrilsCenter.xy, vec2(0.05, 0.9) * nostrilsPlaneSize, 0.5, 1.2);\n}\nfloat getNoseTipFineMask() {\n    vec2 sigmaScaling = vec2(1.5, 1.5);\n\n    return getEllipseMask(sigmaScaling, position.xy, noseTipCenter.xy, noseTipPlaneSize, 0.4, 0.8);\n}\nfloat getNoseTipCoarseMask() {\n    const vec2 sigmaScaling = vec2(1.0, 1.2);\n    return getEllipseMask(sigmaScaling, position.xy, noseBottomCenter.xy, noseTipPlaneSize, 0.5, 1.2);\n}\nfloat getNoseVerticalAxisMask() {\n    const vec2 sigmaScaling = vec2(2.0, 1.0);\n    return getEllipseMask(sigmaScaling, position.xy, nose3DCenter.xy, nosePlainSize, 0.5, 1.2);\n}\nfloat getNoseVerticalAxisFineMask() {\n    const vec2 sigmaScaling = vec2(2.5, 0.8);\n    return getEllipseMask(sigmaScaling, position.xy, nose3DCenter.xy, nosePlainSize, 0.5, 1.2);\n}\nfloat getLipsMask() {\n    const vec2 sigmaScaling = vec2(1.8);\n    return getEllipseMask(sigmaScaling, position.xy, lipsCenter.xy, lipsPlainSize, 0.5, 1.0);\n}\nfloat getLeftEyeMask() {\n    const vec2 sigmaScaling = vec2(0.8);\n    return getEllipseMask(sigmaScaling, position.xy, leftEyeCenter.xy, leftEyePlainSize, 0.5, 1.2);\n}\nfloat getRightEyeMask() {\n    const vec2 sigmaScaling = vec2(0.8);\n    return getEllipseMask(sigmaScaling, position.xy, rightEyeCenter.xy, rightEyePlainSize, 0.5, 1.2);\n}\n\nvec3 getScaledNosePoint(vec3 originalPoint, vec3 center, float theta, float scale) {\n    float sin_t = sin(theta);\n    float cos_t = cos(theta);\n    vec2 v = (originalPoint - center).xy;\n    float d = dot(v, vec2(cos_t, sin_t));\n    d = d * scale;\n    vec2 dv = d * vec2(cos_t, sin_t);\n\n    return vec3(originalPoint.xy+dv, originalPoint.z);\n}\n\nvoid main() {\n    float noseNegativeRegionsMask = (1.0 - getLeftEyeMask()) * (1.0 - getRightEyeMask()) * (1.0 - getLipsMask());\n    float noseMask = getNoseMask() * noseNegativeRegionsMask;\n    //float nostrilsBridgeMask = getNostrilsBridgetMask() * noseNegativeRegionsMask;\n    float noseTipFineMask = getNoseTipFineMask() * noseNegativeRegionsMask;\n    float noseTipCoarseMask = getNoseTipCoarseMask() * noseNegativeRegionsMask;\n    float noseVertivalAxisMask = getNoseVerticalAxisMask() * noseNegativeRegionsMask; // 估计是鼻梁\n    float noseVertivalAxisFineMask = getNoseVerticalAxisFineMask() * noseNegativeRegionsMask; // 估计是鼻梁\n    vec3 displacedNosePoint = position.xyz;\n\n    float cos_t = cos(angles.z);\n    float sin_t = sin(angles.z);\n\n    vec3 noseOutlineWidthPoint = getScaledNosePoint(displacedNosePoint, nose3DCenter, angles.z, 0.3);\n    displacedNosePoint = mix(displacedNosePoint, noseOutlineWidthPoint, noseOutlineWidth * noseTipCoarseMask*(1.0-noseVertivalAxisFineMask));\n    // 鼻梁\n    vec3 noseBridgeWidthPoint = getScaledNosePoint(displacedNosePoint, nose3DCenter, angles.z, 0.3);\n    displacedNosePoint = mix(displacedNosePoint, noseBridgeWidthPoint, noseBridgeWidth * noseVertivalAxisMask);\n\n    vec3 noseSizePoint = getScaledNosePoint(displacedNosePoint, nose3DCenter, angles.z, 0.3);\n    displacedNosePoint = mix(displacedNosePoint, noseSizePoint, noseSize * noseMask);\n\n    const float kNoseLiftingYRatio = 0.05518821053;\n    vec2 noseLiftingVector = vec2(0.0, -kNoseLiftingYRatio * nosePlainSize.y);\n    noseLiftingVector = vec2(dot(noseLiftingVector, vec2(cos_t, -sin_t)), dot(noseLiftingVector, vec2(sin_t, cos_t)));\n    vec3 nosePositionPoint = vec3(displacedNosePoint.xy + noseLiftingVector, displacedNosePoint.z);\n    displacedNosePoint = mix(displacedNosePoint, nosePositionPoint, nosePosition * noseMask);\n\n    float _noseTipSize = noseTipSize * 0.4;\n\n    vec3 noseTipPoint = noseTipCenter + vec3(0.4) * (displacedNosePoint - noseTipCenter);\n    displacedNosePoint = mix(displacedNosePoint, noseTipPoint, _noseTipSize * noseTipFineMask);\n\n    //vec3 nostrilsBridgePoint = noseTipCenter + vec3(0.8, 0.85, 0.8) * (displacedNosePoint - noseTipCenter);\n    //displacedNosePoint = mix(displacedNosePoint, nostrilsBridgePoint, 0.6 * noseTipSize * nostrilsBridgeMask);\n\n    vec2 originalPosition = position.xy;\n\n    vec2 displacedPosition = displacedNosePoint.xy;\n    textureCoordinate = displacedPosition;\n    gl_Position = vec4(originalPosition.x*2.0-1.0, originalPosition.y*2.0-1.0, 0.0, 1.0);\n    //if(getLipsMask() > 0.0) {\n    //    textureCoordinate = vec2(1.0, 0.0);\n    //} else {\n    //    textureCoordinate = vec2(0.0, 0.0);\n    //}\n}";
  public static final String VERTEX_SHADER_VTF = "//uniform highp mat4 projection;\n//uniform highp mat4 faceFrame;\n//uniform highp mat4 stableToImage;\nprecision highp float;\nuniform vec3 nose3DCenter; // 鼻子中心\nuniform vec2 nosePlainSize; //\nuniform vec3 nostrilsCenter; // 鼻孔\nuniform vec2 nostrilsPlaneSize; // 两鼻孔之间？\nuniform vec3 noseTipCenter;\nuniform vec2 noseTipPlaneSize;\nuniform vec3 noseBottomCenter;\n\nuniform vec3 lipsCenter;\nuniform vec2 lipsPlainSize;\nuniform vec2 leftEyePlainSize;\nuniform vec3 leftEyeCenter;\nuniform vec2 rightEyePlainSize;\nuniform vec3 rightEyeCenter;\n\nuniform float noseSize;\nuniform float noseOutlineWidth;\nuniform float noseBridgeWidth;\nuniform float nosePosition;\nuniform float noseTipSize;\nuniform vec3 angles; // angles.x: pitch, angles.y: yaw, angles.z: roll\nuniform vec2 size;\n\nattribute vec4 position;\n//attribute float faceIndex;\n//attribute float depthValue;\nvarying vec2 textureCoordinate;\n\nuniform sampler2D inputImageTexture;\n\nfloat my_smoothstep(float edge0, float edge1, float x) {\n    float t = clamp((x - edge0) / (edge1 - edge0), 0.0, 1.0);\n    return t * t * (3.0 - 2.0 * t);\n}\n\nfloat getEllipseMask(in vec2 sigmaScaling, in vec2 point,in vec2 center, in vec2 boundingSize, float a1, float a2) {\n    // un-normalization\n    boundingSize = boundingSize * size;\n    point = point * size;\n    center = center * size;\n\n    float cos_t = cos(angles.z);\n    float sin_t = sin(angles.z);\n    vec2 translate = (point - center);\n    // rotate and scale\n    vec2 v = vec2(dot(translate, vec2(cos_t, sin_t)), dot(translate, vec2(-sin_t, cos_t))) * sigmaScaling;\n\n    float d2 = sqrt(dot(v / boundingSize, v / boundingSize));\n\n    return 1.0 - my_smoothstep(a1, a2, d2);\n}\n\nfloat getNoseMask() {\n    const vec2 sigmaScaling = vec2(1.0, 1.5);\n    return getEllipseMask(sigmaScaling, position.xy, nose3DCenter.xy, nosePlainSize, 0.5, 1.2);\n}\nfloat getNostrilsBridgetMask() {\n    const vec2 sigmaScaling = vec2(0.3, 0.3);\n    return getEllipseMask(sigmaScaling, position.xy, nostrilsCenter.xy, vec2(0.05, 0.9) * nostrilsPlaneSize, 0.5, 1.2);\n}\nfloat getNoseTipFineMask() {\n    vec2 sigmaScaling = vec2(2.0, 2.0);\n\n    return getEllipseMask(sigmaScaling, position.xy, noseTipCenter.xy, noseTipPlaneSize, 0.4, 0.8);\n}\nfloat getNoseTipCoarseMask() {\n    const vec2 sigmaScaling = vec2(1.0, 1.2);\n    return getEllipseMask(sigmaScaling, position.xy, noseBottomCenter.xy, noseTipPlaneSize, 0.5, 1.2);\n}\nfloat getNoseVerticalAxisMask() {\n    const vec2 sigmaScaling = vec2(2.0, 1.0);\n    return getEllipseMask(sigmaScaling, position.xy, nose3DCenter.xy, nosePlainSize, 0.5, 1.2);\n}\nfloat getNoseVerticalAxisFineMask() {\n    const vec2 sigmaScaling = vec2(2.5, 0.8);\n    return getEllipseMask(sigmaScaling, position.xy, nose3DCenter.xy, nosePlainSize, 0.5, 1.2);\n}\nfloat getLipsMask() {\n    const vec2 sigmaScaling = vec2(1.8);\n    return getEllipseMask(sigmaScaling, position.xy, lipsCenter.xy, lipsPlainSize, 0.5, 1.0);\n}\nfloat getLeftEyeMask() {\n    const vec2 sigmaScaling = vec2(0.8);\n    return getEllipseMask(sigmaScaling, position.xy, leftEyeCenter.xy, leftEyePlainSize, 0.5, 1.2);\n}\nfloat getRightEyeMask() {\n    const vec2 sigmaScaling = vec2(0.8);\n    return getEllipseMask(sigmaScaling, position.xy, rightEyeCenter.xy, rightEyePlainSize, 0.5, 1.2);\n}\n\nvec3 getScaledNosePoint(vec3 originalPoint, vec3 center, float theta, float scale) {\n    float sin_t = sin(theta);\n    float cos_t = cos(theta);\n    vec2 v = (originalPoint - center).xy;\n    float d = dot(v, vec2(cos_t, sin_t));\n    d = d * scale;\n    vec2 dv = d * vec2(cos_t, sin_t);\n\n    return vec3(originalPoint.xy+dv, originalPoint.z);\n}\n\nvoid main() {\n    float noseNegativeRegionsMask = (1.0 - getLeftEyeMask()) * (1.0 - getRightEyeMask()) * (1.0 - getLipsMask());\n    float noseMask = getNoseMask() * noseNegativeRegionsMask;\n    //float nostrilsBridgeMask = getNostrilsBridgetMask() * noseNegativeRegionsMask;\n    float noseTipFineMask = getNoseTipFineMask() * noseNegativeRegionsMask;\n    float noseTipCoarseMask = getNoseTipCoarseMask() * noseNegativeRegionsMask;\n    float noseVertivalAxisMask = getNoseVerticalAxisMask() * noseNegativeRegionsMask; // 估计是鼻梁\n    float noseVertivalAxisFineMask = getNoseVerticalAxisFineMask() * noseNegativeRegionsMask; // 估计是鼻梁\n    vec3 displacedNosePoint = position.xyz;\n\n    float cos_t = cos(angles.z);\n    float sin_t = sin(angles.z);\n\n    vec3 noseOutlineWidthPoint = getScaledNosePoint(displacedNosePoint, nose3DCenter, angles.z, 0.3);\n    displacedNosePoint = mix(displacedNosePoint, noseOutlineWidthPoint, noseOutlineWidth * noseTipCoarseMask*(1.0-noseVertivalAxisFineMask));\n    // 鼻梁\n    vec3 noseBridgeWidthPoint = getScaledNosePoint(displacedNosePoint, nose3DCenter, angles.z, 0.3);\n    displacedNosePoint = mix(displacedNosePoint, noseBridgeWidthPoint, noseBridgeWidth * noseVertivalAxisMask);\n\n    vec3 noseSizePoint = getScaledNosePoint(displacedNosePoint, nose3DCenter, angles.z, 0.3);\n    displacedNosePoint = mix(displacedNosePoint, noseSizePoint, noseSize * noseMask);\n\n    const float kNoseLiftingYRatio = 0.05518821053;\n    vec2 noseLiftingVector = vec2(0.0, -kNoseLiftingYRatio * nosePlainSize.y);\n    noseLiftingVector = vec2(dot(noseLiftingVector, vec2(cos_t, -sin_t)), dot(noseLiftingVector, vec2(sin_t, cos_t)));\n    vec3 nosePositionPoint = vec3(displacedNosePoint.xy + noseLiftingVector, displacedNosePoint.z);\n    displacedNosePoint = mix(displacedNosePoint, nosePositionPoint, nosePosition * noseMask);\n\n    float _noseTipSize = noseTipSize * 2.0;\n\n    vec3 noseTipPoint = noseTipCenter + vec3(0.4) * (displacedNosePoint - noseTipCenter);\n    displacedNosePoint = mix(displacedNosePoint, noseTipPoint, _noseTipSize * noseTipFineMask);\n\n    //vec3 nostrilsBridgePoint = noseTipCenter + vec3(0.8, 0.85, 0.8) * (displacedNosePoint - noseTipCenter);\n    //displacedNosePoint = mix(displacedNosePoint, nostrilsBridgePoint, 0.6 * noseTipSize * nostrilsBridgeMask);\n\n    vec2 originalPosition = position.xy;\n\n    vec2 displacedPosition = displacedNosePoint.xy;\n    vec4 color = texture2D(inputImageTexture, position.xy);\n    vec2 offset = (color.xy * 255.0 + color.zw) / 127.5 - 1.0;\n    textureCoordinate = offset + displacedPosition - originalPosition;\n\n    gl_Position = vec4(originalPosition.x*2.0-1.0, originalPosition.y*2.0-1.0, 0.0, 1.0);\n    //if(getLipsMask() > 0.0) {\n    //    textureCoordinate = vec2(1.0, 0.0);\n    //} else {\n    //    textureCoordinate = vec2(0.0, 0.0);\n    //}\n}";
  private static final int XCOORD_NUM = 128;
  private static final int YCOORD_NUM = 128;
  private static List<PointF> mFullscreenVerticesPortrait = VideoMaterialUtil.genFullScreenVertices(128, 128, 0.0F, 1.0F, 0.0F, 1.0F);
  private static List<PointF> mInitTextureCoordinatesPortrait = VideoMaterialUtil.genFullScreenVertices(128, 128, 0.0F, 1.0F, 0.0F, 1.0F);
  private float[] angles = { 0.0F, 0.0F, 0.0F };
  private float[] leftEyeCenter = { 0.0F, 0.0F, 0.0F };
  private float[] leftEyePlainSize = { 0.0F, 0.0F };
  private float[] lipsCenter = { 0.0F, 0.0F, 0.0F };
  private float[] lipsPlainSize = { 0.0F, 0.0F };
  private float meshType;
  private float[] nose3DCenter = { 0.0F, 0.0F, 0.0F };
  private float[] noseBottomCenter = { 0.0F, 0.0F, 0.0F };
  private float noseBridgeWidth = 0.1F;
  private float noseOutlineWidth = 0.0F;
  private float[] nosePlainSize = { 0.0F, 0.0F };
  private float nosePosition = 0.0F;
  private float noseSize = 0.0F;
  private float[] noseTipCenter = { 0.0F, 0.0F, 0.0F };
  private float[] noseTipPlaneSize = { 0.0F, 0.0F };
  private float noseTipSize = 1.0F;
  private float[] nostrilsCenter = { 0.0F, 0.0F, 0.0F };
  private float[] nostrilsPlaneSize = { 0.0F, 0.0F };
  private float[] rightEyeCenter = { 0.0F, 0.0F, 0.0F };
  private float[] rightEyePlainSize = { 0.0F, 0.0F };
  private float[] size = { 1.0F, 1.0F };
  
  public ReshapeNoseFilter(ReshapeType paramReshapeType)
  {
    super("//uniform highp mat4 projection;\n//uniform highp mat4 faceFrame;\n//uniform highp mat4 stableToImage;\nprecision highp float;\nuniform vec3 nose3DCenter; // 鼻子中心\nuniform vec2 nosePlainSize; //\nuniform vec3 nostrilsCenter; // 鼻孔\nuniform vec2 nostrilsPlaneSize; // 两鼻孔之间？\nuniform vec3 noseTipCenter;\nuniform vec2 noseTipPlaneSize;\nuniform vec3 noseBottomCenter;\n\nuniform vec3 lipsCenter;\nuniform vec2 lipsPlainSize;\nuniform vec2 leftEyePlainSize;\nuniform vec3 leftEyeCenter;\nuniform vec2 rightEyePlainSize;\nuniform vec3 rightEyeCenter;\n\nuniform float noseSize;\nuniform float noseOutlineWidth;\nuniform float noseBridgeWidth;\nuniform float nosePosition;\nuniform float noseTipSize;\nuniform vec3 angles; // angles.x: pitch, angles.y: yaw, angles.z: roll\nuniform vec2 size;\n\nattribute vec4 position;\n//attribute float faceIndex;\n//attribute float depthValue;\nvarying vec2 textureCoordinate;\n\nuniform sampler2D inputImageTexture;\n\nfloat my_smoothstep(float edge0, float edge1, float x) {\n    float t = clamp((x - edge0) / (edge1 - edge0), 0.0, 1.0);\n    return t * t * (3.0 - 2.0 * t);\n}\n\nfloat getEllipseMask(in vec2 sigmaScaling, in vec2 point,in vec2 center, in vec2 boundingSize, float a1, float a2) {\n    // un-normalization\n    boundingSize = boundingSize * size;\n    point = point * size;\n    center = center * size;\n\n    float cos_t = cos(angles.z);\n    float sin_t = sin(angles.z);\n    vec2 translate = (point - center);\n    // rotate and scale\n    vec2 v = vec2(dot(translate, vec2(cos_t, sin_t)), dot(translate, vec2(-sin_t, cos_t))) * sigmaScaling;\n\n    float d2 = sqrt(dot(v / boundingSize, v / boundingSize));\n\n    return 1.0 - my_smoothstep(a1, a2, d2);\n}\n\nfloat getNoseMask() {\n    const vec2 sigmaScaling = vec2(1.0, 1.5);\n    return getEllipseMask(sigmaScaling, position.xy, nose3DCenter.xy, nosePlainSize, 0.5, 1.2);\n}\nfloat getNostrilsBridgetMask() {\n    const vec2 sigmaScaling = vec2(0.3, 0.3);\n    return getEllipseMask(sigmaScaling, position.xy, nostrilsCenter.xy, vec2(0.05, 0.9) * nostrilsPlaneSize, 0.5, 1.2);\n}\nfloat getNoseTipFineMask() {\n    vec2 sigmaScaling = vec2(1.5, 1.5);\n\n    return getEllipseMask(sigmaScaling, position.xy, noseTipCenter.xy, noseTipPlaneSize, 0.4, 0.8);\n}\nfloat getNoseTipCoarseMask() {\n    const vec2 sigmaScaling = vec2(1.0, 1.2);\n    return getEllipseMask(sigmaScaling, position.xy, noseBottomCenter.xy, noseTipPlaneSize, 0.5, 1.2);\n}\nfloat getNoseVerticalAxisMask() {\n    const vec2 sigmaScaling = vec2(2.0, 1.0);\n    return getEllipseMask(sigmaScaling, position.xy, nose3DCenter.xy, nosePlainSize, 0.5, 1.2);\n}\nfloat getNoseVerticalAxisFineMask() {\n    const vec2 sigmaScaling = vec2(2.5, 0.8);\n    return getEllipseMask(sigmaScaling, position.xy, nose3DCenter.xy, nosePlainSize, 0.5, 1.2);\n}\nfloat getLipsMask() {\n    const vec2 sigmaScaling = vec2(1.8);\n    return getEllipseMask(sigmaScaling, position.xy, lipsCenter.xy, lipsPlainSize, 0.5, 1.0);\n}\nfloat getLeftEyeMask() {\n    const vec2 sigmaScaling = vec2(0.8);\n    return getEllipseMask(sigmaScaling, position.xy, leftEyeCenter.xy, leftEyePlainSize, 0.5, 1.2);\n}\nfloat getRightEyeMask() {\n    const vec2 sigmaScaling = vec2(0.8);\n    return getEllipseMask(sigmaScaling, position.xy, rightEyeCenter.xy, rightEyePlainSize, 0.5, 1.2);\n}\n\nvec3 getScaledNosePoint(vec3 originalPoint, vec3 center, float theta, float scale) {\n    float sin_t = sin(theta);\n    float cos_t = cos(theta);\n    vec2 v = (originalPoint - center).xy;\n    float d = dot(v, vec2(cos_t, sin_t));\n    d = d * scale;\n    vec2 dv = d * vec2(cos_t, sin_t);\n\n    return vec3(originalPoint.xy+dv, originalPoint.z);\n}\n\nvoid main() {\n    float noseNegativeRegionsMask = (1.0 - getLeftEyeMask()) * (1.0 - getRightEyeMask()) * (1.0 - getLipsMask());\n    float noseMask = getNoseMask() * noseNegativeRegionsMask;\n    //float nostrilsBridgeMask = getNostrilsBridgetMask() * noseNegativeRegionsMask;\n    float noseTipFineMask = getNoseTipFineMask() * noseNegativeRegionsMask;\n    float noseTipCoarseMask = getNoseTipCoarseMask() * noseNegativeRegionsMask;\n    float noseVertivalAxisMask = getNoseVerticalAxisMask() * noseNegativeRegionsMask; // 估计是鼻梁\n    float noseVertivalAxisFineMask = getNoseVerticalAxisFineMask() * noseNegativeRegionsMask; // 估计是鼻梁\n    vec3 displacedNosePoint = position.xyz;\n\n    float cos_t = cos(angles.z);\n    float sin_t = sin(angles.z);\n\n    vec3 noseOutlineWidthPoint = getScaledNosePoint(displacedNosePoint, nose3DCenter, angles.z, 0.3);\n    displacedNosePoint = mix(displacedNosePoint, noseOutlineWidthPoint, noseOutlineWidth * noseTipCoarseMask*(1.0-noseVertivalAxisFineMask));\n    // 鼻梁\n    vec3 noseBridgeWidthPoint = getScaledNosePoint(displacedNosePoint, nose3DCenter, angles.z, 0.3);\n    displacedNosePoint = mix(displacedNosePoint, noseBridgeWidthPoint, noseBridgeWidth * noseVertivalAxisMask);\n\n    vec3 noseSizePoint = getScaledNosePoint(displacedNosePoint, nose3DCenter, angles.z, 0.3);\n    displacedNosePoint = mix(displacedNosePoint, noseSizePoint, noseSize * noseMask);\n\n    const float kNoseLiftingYRatio = 0.05518821053;\n    vec2 noseLiftingVector = vec2(0.0, -kNoseLiftingYRatio * nosePlainSize.y);\n    noseLiftingVector = vec2(dot(noseLiftingVector, vec2(cos_t, -sin_t)), dot(noseLiftingVector, vec2(sin_t, cos_t)));\n    vec3 nosePositionPoint = vec3(displacedNosePoint.xy + noseLiftingVector, displacedNosePoint.z);\n    displacedNosePoint = mix(displacedNosePoint, nosePositionPoint, nosePosition * noseMask);\n\n    float _noseTipSize = noseTipSize * 0.4;\n\n    vec3 noseTipPoint = noseTipCenter + vec3(0.4) * (displacedNosePoint - noseTipCenter);\n    displacedNosePoint = mix(displacedNosePoint, noseTipPoint, _noseTipSize * noseTipFineMask);\n\n    //vec3 nostrilsBridgePoint = noseTipCenter + vec3(0.8, 0.85, 0.8) * (displacedNosePoint - noseTipCenter);\n    //displacedNosePoint = mix(displacedNosePoint, nostrilsBridgePoint, 0.6 * noseTipSize * nostrilsBridgeMask);\n\n    vec2 originalPosition = position.xy;\n\n    vec2 displacedPosition = displacedNosePoint.xy;\n    textureCoordinate = displacedPosition;\n    gl_Position = vec4(originalPosition.x*2.0-1.0, originalPosition.y*2.0-1.0, 0.0, 1.0);\n    //if(getLipsMask() > 0.0) {\n    //    textureCoordinate = vec2(1.0, 0.0);\n    //} else {\n    //    textureCoordinate = vec2(0.0, 0.0);\n    //}\n}", "#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float; //支持高精度，限定浮点型为高精度\n#else\n    precision mediump float; //不支持高精度，限定浮点型为中精度\n#endif\n\nvarying vec2 textureCoordinate;\nuniform sampler2D inputImageTexture;\nvoid main()\n{\n    //gl_FragColor = vec4(inputTextureCoordinate.xy, vec2(0.0, 1.0));\n\n    //vec4 color = vec4(textureCoordinate.x*8.0+0.5, textureCoordinate.y*8.0+0.5, 0.5, 1.0);\n    //gl_FragColor = color;\n\n    //gl_FragColor = vec4(textureCoordinate, textureCoordinate.x, 1.0);\n\n    gl_FragColor = texture2D(inputImageTexture, textureCoordinate);\n}");
    if (paramReshapeType == ReshapeType.VTF) {
      updateFilterShader("//uniform highp mat4 projection;\n//uniform highp mat4 faceFrame;\n//uniform highp mat4 stableToImage;\nprecision highp float;\nuniform vec3 nose3DCenter; // 鼻子中心\nuniform vec2 nosePlainSize; //\nuniform vec3 nostrilsCenter; // 鼻孔\nuniform vec2 nostrilsPlaneSize; // 两鼻孔之间？\nuniform vec3 noseTipCenter;\nuniform vec2 noseTipPlaneSize;\nuniform vec3 noseBottomCenter;\n\nuniform vec3 lipsCenter;\nuniform vec2 lipsPlainSize;\nuniform vec2 leftEyePlainSize;\nuniform vec3 leftEyeCenter;\nuniform vec2 rightEyePlainSize;\nuniform vec3 rightEyeCenter;\n\nuniform float noseSize;\nuniform float noseOutlineWidth;\nuniform float noseBridgeWidth;\nuniform float nosePosition;\nuniform float noseTipSize;\nuniform vec3 angles; // angles.x: pitch, angles.y: yaw, angles.z: roll\nuniform vec2 size;\n\nattribute vec4 position;\n//attribute float faceIndex;\n//attribute float depthValue;\nvarying vec2 textureCoordinate;\n\nuniform sampler2D inputImageTexture;\n\nfloat my_smoothstep(float edge0, float edge1, float x) {\n    float t = clamp((x - edge0) / (edge1 - edge0), 0.0, 1.0);\n    return t * t * (3.0 - 2.0 * t);\n}\n\nfloat getEllipseMask(in vec2 sigmaScaling, in vec2 point,in vec2 center, in vec2 boundingSize, float a1, float a2) {\n    // un-normalization\n    boundingSize = boundingSize * size;\n    point = point * size;\n    center = center * size;\n\n    float cos_t = cos(angles.z);\n    float sin_t = sin(angles.z);\n    vec2 translate = (point - center);\n    // rotate and scale\n    vec2 v = vec2(dot(translate, vec2(cos_t, sin_t)), dot(translate, vec2(-sin_t, cos_t))) * sigmaScaling;\n\n    float d2 = sqrt(dot(v / boundingSize, v / boundingSize));\n\n    return 1.0 - my_smoothstep(a1, a2, d2);\n}\n\nfloat getNoseMask() {\n    const vec2 sigmaScaling = vec2(1.0, 1.5);\n    return getEllipseMask(sigmaScaling, position.xy, nose3DCenter.xy, nosePlainSize, 0.5, 1.2);\n}\nfloat getNostrilsBridgetMask() {\n    const vec2 sigmaScaling = vec2(0.3, 0.3);\n    return getEllipseMask(sigmaScaling, position.xy, nostrilsCenter.xy, vec2(0.05, 0.9) * nostrilsPlaneSize, 0.5, 1.2);\n}\nfloat getNoseTipFineMask() {\n    vec2 sigmaScaling = vec2(2.0, 2.0);\n\n    return getEllipseMask(sigmaScaling, position.xy, noseTipCenter.xy, noseTipPlaneSize, 0.4, 0.8);\n}\nfloat getNoseTipCoarseMask() {\n    const vec2 sigmaScaling = vec2(1.0, 1.2);\n    return getEllipseMask(sigmaScaling, position.xy, noseBottomCenter.xy, noseTipPlaneSize, 0.5, 1.2);\n}\nfloat getNoseVerticalAxisMask() {\n    const vec2 sigmaScaling = vec2(2.0, 1.0);\n    return getEllipseMask(sigmaScaling, position.xy, nose3DCenter.xy, nosePlainSize, 0.5, 1.2);\n}\nfloat getNoseVerticalAxisFineMask() {\n    const vec2 sigmaScaling = vec2(2.5, 0.8);\n    return getEllipseMask(sigmaScaling, position.xy, nose3DCenter.xy, nosePlainSize, 0.5, 1.2);\n}\nfloat getLipsMask() {\n    const vec2 sigmaScaling = vec2(1.8);\n    return getEllipseMask(sigmaScaling, position.xy, lipsCenter.xy, lipsPlainSize, 0.5, 1.0);\n}\nfloat getLeftEyeMask() {\n    const vec2 sigmaScaling = vec2(0.8);\n    return getEllipseMask(sigmaScaling, position.xy, leftEyeCenter.xy, leftEyePlainSize, 0.5, 1.2);\n}\nfloat getRightEyeMask() {\n    const vec2 sigmaScaling = vec2(0.8);\n    return getEllipseMask(sigmaScaling, position.xy, rightEyeCenter.xy, rightEyePlainSize, 0.5, 1.2);\n}\n\nvec3 getScaledNosePoint(vec3 originalPoint, vec3 center, float theta, float scale) {\n    float sin_t = sin(theta);\n    float cos_t = cos(theta);\n    vec2 v = (originalPoint - center).xy;\n    float d = dot(v, vec2(cos_t, sin_t));\n    d = d * scale;\n    vec2 dv = d * vec2(cos_t, sin_t);\n\n    return vec3(originalPoint.xy+dv, originalPoint.z);\n}\n\nvoid main() {\n    float noseNegativeRegionsMask = (1.0 - getLeftEyeMask()) * (1.0 - getRightEyeMask()) * (1.0 - getLipsMask());\n    float noseMask = getNoseMask() * noseNegativeRegionsMask;\n    //float nostrilsBridgeMask = getNostrilsBridgetMask() * noseNegativeRegionsMask;\n    float noseTipFineMask = getNoseTipFineMask() * noseNegativeRegionsMask;\n    float noseTipCoarseMask = getNoseTipCoarseMask() * noseNegativeRegionsMask;\n    float noseVertivalAxisMask = getNoseVerticalAxisMask() * noseNegativeRegionsMask; // 估计是鼻梁\n    float noseVertivalAxisFineMask = getNoseVerticalAxisFineMask() * noseNegativeRegionsMask; // 估计是鼻梁\n    vec3 displacedNosePoint = position.xyz;\n\n    float cos_t = cos(angles.z);\n    float sin_t = sin(angles.z);\n\n    vec3 noseOutlineWidthPoint = getScaledNosePoint(displacedNosePoint, nose3DCenter, angles.z, 0.3);\n    displacedNosePoint = mix(displacedNosePoint, noseOutlineWidthPoint, noseOutlineWidth * noseTipCoarseMask*(1.0-noseVertivalAxisFineMask));\n    // 鼻梁\n    vec3 noseBridgeWidthPoint = getScaledNosePoint(displacedNosePoint, nose3DCenter, angles.z, 0.3);\n    displacedNosePoint = mix(displacedNosePoint, noseBridgeWidthPoint, noseBridgeWidth * noseVertivalAxisMask);\n\n    vec3 noseSizePoint = getScaledNosePoint(displacedNosePoint, nose3DCenter, angles.z, 0.3);\n    displacedNosePoint = mix(displacedNosePoint, noseSizePoint, noseSize * noseMask);\n\n    const float kNoseLiftingYRatio = 0.05518821053;\n    vec2 noseLiftingVector = vec2(0.0, -kNoseLiftingYRatio * nosePlainSize.y);\n    noseLiftingVector = vec2(dot(noseLiftingVector, vec2(cos_t, -sin_t)), dot(noseLiftingVector, vec2(sin_t, cos_t)));\n    vec3 nosePositionPoint = vec3(displacedNosePoint.xy + noseLiftingVector, displacedNosePoint.z);\n    displacedNosePoint = mix(displacedNosePoint, nosePositionPoint, nosePosition * noseMask);\n\n    float _noseTipSize = noseTipSize * 2.0;\n\n    vec3 noseTipPoint = noseTipCenter + vec3(0.4) * (displacedNosePoint - noseTipCenter);\n    displacedNosePoint = mix(displacedNosePoint, noseTipPoint, _noseTipSize * noseTipFineMask);\n\n    //vec3 nostrilsBridgePoint = noseTipCenter + vec3(0.8, 0.85, 0.8) * (displacedNosePoint - noseTipCenter);\n    //displacedNosePoint = mix(displacedNosePoint, nostrilsBridgePoint, 0.6 * noseTipSize * nostrilsBridgeMask);\n\n    vec2 originalPosition = position.xy;\n\n    vec2 displacedPosition = displacedNosePoint.xy;\n    vec4 color = texture2D(inputImageTexture, position.xy);\n    vec2 offset = (color.xy * 255.0 + color.zw) / 127.5 - 1.0;\n    textureCoordinate = offset + displacedPosition - originalPosition;\n\n    gl_Position = vec4(originalPosition.x*2.0-1.0, originalPosition.y*2.0-1.0, 0.0, 1.0);\n    //if(getLipsMask() > 0.0) {\n    //    textureCoordinate = vec2(1.0, 0.0);\n    //} else {\n    //    textureCoordinate = vec2(0.0, 0.0);\n    //}\n}", "#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float; //支持高精度，限定浮点型为高精度\n#else\n    precision mediump float; //不支持高精度，限定浮点型为中精度\n#endif\n\nvarying vec2 textureCoordinate;\nuniform sampler2D inputImageTexture;\nvoid main()\n{\n\n    //vec2 diffPosition = textureCoordinate;\n    //float ddx = (diffPosition.x + 1.0) / 2.0;\n    //float ddy = (diffPosition.y + 1.0) / 2.0;\n    //diffPosition = vec2(ddx,ddy);\n    //vec2 a = fract(diffPosition * 255.0 / 256.0);\n    //vec2 b = fract(diffPosition * 255.0 * 255.0 / 256.0);\n    //gl_FragColor = vec4(a,b);\n\n    // 新版的 shader 颜色通道中记录的是位移偏移量，只有在最后 combinedFilter 才最终将所有 filter 的位移量叠加，去图上取点。这样的好处是：\n    // 1. 只有 128 * 128 个点\n    // 2. smoothstep 会更平滑，128 * 128 个点取插值，原来的处理方法会使像素点变模糊\n    // 3. 两个矩形交叠的地方，位移处理的先后顺序不影响结果（不能说这是好还是坏，因为 PS 的液化是作用在原图上的）\n\n    // 至于此处要改为 * 255 再 / 255 是为了提升精度（浮点纹理 iOS 不支持，而一个字节只能表示 256 个不同值）\n    // 本来小奇使用了浮点纹理，但是发现有机型不支持，不用浮点纹理又精度不够，所以采用这个方法，变成2个字节表示一个值，提升了精度。\n    vec2 diffPosition = textureCoordinate;\n    diffPosition = 0.5 * (diffPosition + 1.0) * 255.0;  // 0.5 * (diffPosition + 1.0) 是将(-1, 1)间的值转换到(0, 1)，\n    vec2 a = floor(diffPosition) / 255.0;\n    vec2 b = fract(diffPosition);\n    gl_FragColor = vec4(a, b);\n\n\n    //vec2 diffPosition = textureCoordinate;\n    //diffPosition = 0.5 * (diffPosition + 1.0) * 256.0;\n    //vec2 a = floor(diffPosition) / 256.0;\n    //vec2 b = fract(diffPosition);\n    //gl_FragColor = vec4(a, b);\n}\n");
    }
    if (paramReshapeType == ReshapeType.NORMAL) {
      f = 0.5F;
    }
    this.meshType = f;
    initParams();
  }
  
  public void ApplyGLSLFilter()
  {
    initParams();
    super.ApplyGLSLFilter();
    setDrawMode(AEOpenRenderConfig.DRAW_MODE.TRIANGLE_STRIP);
  }
  
  public void initAttribParams()
  {
    setPositions(VideoMaterialUtil.toFlatArray((PointF[])mFullscreenVerticesPortrait.toArray(new PointF[0])), false);
    setTexCords(VideoMaterialUtil.toFlatArray((PointF[])mInitTextureCoordinatesPortrait.toArray(new PointF[0])), false);
    setCoordNum(32897);
  }
  
  public void initParams()
  {
    addParam(new UniformParam.FloatsParam("nose3DCenter", this.nose3DCenter));
    addParam(new UniformParam.FloatsParam("nosePlainSize", this.nosePlainSize));
    addParam(new UniformParam.FloatsParam("nostrilsCenter", this.nostrilsCenter));
    addParam(new UniformParam.FloatsParam("nostrilsPlaneSize", this.nostrilsPlaneSize));
    addParam(new UniformParam.FloatsParam("noseTipCenter", this.noseTipCenter));
    addParam(new UniformParam.FloatsParam("noseTipPlaneSize", this.noseTipPlaneSize));
    addParam(new UniformParam.FloatsParam("noseBottomCenter", this.noseBottomCenter));
    addParam(new UniformParam.FloatsParam("lipsCenter", this.lipsCenter));
    addParam(new UniformParam.FloatsParam("lipsPlainSize", this.lipsPlainSize));
    addParam(new UniformParam.FloatsParam("leftEyePlainSize", this.leftEyePlainSize));
    addParam(new UniformParam.FloatsParam("leftEyeCenter", this.leftEyeCenter));
    addParam(new UniformParam.FloatsParam("rightEyePlainSize", this.rightEyePlainSize));
    addParam(new UniformParam.FloatsParam("rightEyeCenter", this.rightEyeCenter));
    addParam(new UniformParam.FloatParam("noseSize", this.noseSize));
    addParam(new UniformParam.FloatParam("noseOutlineWidth", this.noseOutlineWidth));
    addParam(new UniformParam.FloatParam("noseBridgeWidth", this.noseBridgeWidth));
    addParam(new UniformParam.FloatParam("nosePosition", this.nosePosition));
    addParam(new UniformParam.FloatParam("noseTipSize", this.noseTipSize));
    addParam(new UniformParam.FloatsParam("angles", this.angles));
    addParam(new UniformParam.FloatsParam("size", this.size));
    addParam(new UniformParam.FloatParam("meshType", this.meshType));
  }
  
  public void setParam(Map<String, Object> paramMap)
  {
    if (paramMap.containsKey("nose3DCenter")) {
      this.nose3DCenter = ((float[])paramMap.get("nose3DCenter"));
    }
    if (paramMap.containsKey("nosePlainSize")) {
      this.nosePlainSize = ((float[])paramMap.get("nosePlainSize"));
    }
    if (paramMap.containsKey("nostrilsCenter")) {
      this.nostrilsCenter = ((float[])paramMap.get("nostrilsCenter"));
    }
    if (paramMap.containsKey("nostrilsPlaneSize")) {
      this.nostrilsPlaneSize = ((float[])paramMap.get("nostrilsPlaneSize"));
    }
    if (paramMap.containsKey("noseTipCenter")) {
      this.noseTipCenter = ((float[])paramMap.get("noseTipCenter"));
    }
    if (paramMap.containsKey("noseTipPlaneSize")) {
      this.noseTipPlaneSize = ((float[])paramMap.get("noseTipPlaneSize"));
    }
    if (paramMap.containsKey("noseBottomCenter")) {
      this.noseBottomCenter = ((float[])paramMap.get("noseBottomCenter"));
    }
    if (paramMap.containsKey("lipsCenter")) {
      this.lipsCenter = ((float[])paramMap.get("lipsCenter"));
    }
    if (paramMap.containsKey("lipsPlainSize")) {
      this.lipsPlainSize = ((float[])paramMap.get("lipsPlainSize"));
    }
    if (paramMap.containsKey("leftEyePlainSize")) {
      this.leftEyePlainSize = ((float[])paramMap.get("leftEyePlainSize"));
    }
    if (paramMap.containsKey("leftEyeCenter")) {
      this.leftEyeCenter = ((float[])paramMap.get("leftEyeCenter"));
    }
    if (paramMap.containsKey("rightEyePlainSize")) {
      this.rightEyePlainSize = ((float[])paramMap.get("rightEyePlainSize"));
    }
    if (paramMap.containsKey("rightEyeCenter")) {
      this.rightEyeCenter = ((float[])paramMap.get("rightEyeCenter"));
    }
    if (paramMap.containsKey("noseSize")) {
      this.noseSize = (((Float)paramMap.get("noseSize")).floatValue() * 0.006F);
    }
    if (paramMap.containsKey("noseOutlineWidth")) {
      this.noseOutlineWidth = (((Float)paramMap.get("noseOutlineWidth")).floatValue() * 0.01F);
    }
    if (paramMap.containsKey("noseBridgeWidth")) {
      this.noseBridgeWidth = (((Float)paramMap.get("noseBridgeWidth")).floatValue() * 0.008F);
    }
    if (paramMap.containsKey("nosePosition")) {
      this.nosePosition = (((Float)paramMap.get("nosePosition")).floatValue() * 0.008F);
    }
    if (paramMap.containsKey("noseTipSize")) {
      this.noseTipSize = (((Float)paramMap.get("noseTipSize")).floatValue() * -0.01F);
    }
    if (paramMap.containsKey("angles")) {
      this.angles = ((float[])paramMap.get("angles"));
    }
    if (paramMap.containsKey("size")) {
      this.size = ((float[])paramMap.get("size"));
    }
    initParams();
  }
}


/* Location:           L:\local\mybackup\temp\qq_apk\com.tencent.mobileqq\classes10.jar
 * Qualified Name:     com.tencent.ttpic.openapi.filter.ReshapeNoseFilter
 * JD-Core Version:    0.7.0.1
 */