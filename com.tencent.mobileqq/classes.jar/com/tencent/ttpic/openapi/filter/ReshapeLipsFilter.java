package com.tencent.ttpic.openapi.filter;

import android.graphics.PointF;
import com.tencent.aekit.openrender.AEOpenRenderConfig.DRAW_MODE;
import com.tencent.aekit.openrender.UniformParam.FloatParam;
import com.tencent.aekit.openrender.UniformParam.FloatsParam;
import com.tencent.aekit.openrender.internal.VideoFilterBase;
import com.tencent.ttpic.openapi.model.VideoMaterial;
import java.util.List;
import java.util.Map;

public class ReshapeLipsFilter
  extends VideoFilterBase
{
  public static final String FRAGMENT_SHADER_NORMAL = "#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float; //支持高精度，限定浮点型为高精度\n#else\n    precision mediump float; //不支持高精度，限定浮点型为中精度\n#endif\n\nvarying vec2 textureCoordinate;\nuniform sampler2D inputImageTexture;\nvoid main()\n{\n    //gl_FragColor = vec4(inputTextureCoordinate.xy, vec2(0.0, 1.0));\n\n    //vec4 color = vec4(textureCoordinate.x*8.0+0.5, textureCoordinate.y*8.0+0.5, 0.5, 1.0);\n    //gl_FragColor = color;\n\n    //gl_FragColor = vec4(textureCoordinate, textureCoordinate.x, 1.0);\n\n    gl_FragColor = texture2D(inputImageTexture, textureCoordinate);\n}";
  public static final String FRAGMENT_SHADER_VTF = "#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float; //支持高精度，限定浮点型为高精度\n#else\n    precision mediump float; //不支持高精度，限定浮点型为中精度\n#endif\n\nvarying vec2 textureCoordinate;\nuniform sampler2D inputImageTexture;\nvoid main()\n{\n\n    //vec2 diffPosition = textureCoordinate;\n    //float ddx = (diffPosition.x + 1.0) / 2.0;\n    //float ddy = (diffPosition.y + 1.0) / 2.0;\n    //diffPosition = vec2(ddx,ddy);\n    //vec2 a = fract(diffPosition * 255.0 / 256.0);\n    //vec2 b = fract(diffPosition * 255.0 * 255.0 / 256.0);\n    //gl_FragColor = vec4(a,b);\n\n    // 新版的 shader 颜色通道中记录的是位移偏移量，只有在最后 combinedFilter 才最终将所有 filter 的位移量叠加，去图上取点。这样的好处是：\n    // 1. 只有 128 * 128 个点\n    // 2. smoothstep 会更平滑，128 * 128 个点取插值，原来的处理方法会使像素点变模糊\n    // 3. 两个矩形交叠的地方，位移处理的先后顺序不影响结果（不能说这是好还是坏，因为 PS 的液化是作用在原图上的）\n\n    // 至于此处要改为 * 255 再 / 255 是为了提升精度（浮点纹理 iOS 不支持，而一个字节只能表示 256 个不同值）\n    // 本来小奇使用了浮点纹理，但是发现有机型不支持，不用浮点纹理又精度不够，所以采用这个方法，变成2个字节表示一个值，提升了精度。\n    vec2 diffPosition = textureCoordinate;\n    diffPosition = 0.5 * (diffPosition + 1.0) * 255.0;  // 0.5 * (diffPosition + 1.0) 是将(-1, 1)间的值转换到(0, 1)，\n    vec2 a = floor(diffPosition) / 255.0;\n    vec2 b = fract(diffPosition);\n    gl_FragColor = vec4(a, b);\n\n\n    //vec2 diffPosition = textureCoordinate;\n    //diffPosition = 0.5 * (diffPosition + 1.0) * 256.0;\n    //vec2 a = floor(diffPosition) / 256.0;\n    //vec2 b = fract(diffPosition);\n    //gl_FragColor = vec4(a, b);\n}\n";
  public static final String VERTEX_SHADER_NORMAL = "precision highp float;\n//uniform mat4 projection;\n//uniform mat4 faceFrame;\n//uniform mat4 stableToImage;\nuniform vec2 lipsPlainSize;\nuniform vec3 lipsCenter;\nuniform vec2 nosePlainSize;\nuniform vec3 noseCenter;\nuniform float lipsSize;\nuniform float lipsWidth;\nuniform float lipsHeight;\nuniform float lipsYPosition;\n//uniform sampler2D teethRegionMask;\nattribute vec4 position;\n//attribute float faceIndex;\n//attribute float depthValue;\nvarying vec2 textureCoordinate;\nuniform vec3 angles; // angles.x: pitch, angles.y: yaw, angles.z: roll\nuniform vec2 size;\n\nuniform sampler2D inputImageTexture;\n\nfloat my_smoothstep(float edge0, float edge1, float x) {\n    float t = clamp((x - edge0) / (edge1 - edge0), 0.0, 1.0);\n    return t * t * (3.0 - 2.0 * t);\n}\n\nfloat getEllipseMask(in vec2 sigmaScaling, in vec2 point,in vec2 center, in vec2 boundingSize, float a1, float a2) {\n    // un-normalization\n    boundingSize = boundingSize * size;\n    point = point * size;\n    center = center * size;\n\n    float cos_t = cos(angles.z);\n    float sin_t = sin(angles.z);\n    vec2 translate = (point - center);\n    // rotate and scale\n    vec2 v = vec2(dot(translate, vec2(cos_t, sin_t)), dot(translate, vec2(-sin_t, cos_t))) * sigmaScaling;\n\n    float d2 = sqrt(dot(v / boundingSize, v / boundingSize));\n\n    return 1.0 - my_smoothstep(a1, a2, d2);\n}\n\nfloat getLipsMask() {\n    const vec2 sigmaScaling = vec2(1.6, 1.5);\n    const float upDirectionBias = 0.15;\n    // vec2 lipsCenterBiased = lipsCenter.xy - sign(stableToImage[1][1]) * lipsPlainSize.y * upDirectionBias;\n    vec2 lipsCenterBiased = lipsCenter.xy;\n    // vec2 lipsPlaineSizeBiased = vec2(0.9, 1.0 - upDirectionBias) * lipsPlainSize;\n    vec2 lipsPlaineSizeBiased = lipsPlainSize;\n    return getEllipseMask(sigmaScaling, position.xy, lipsCenterBiased, lipsPlaineSizeBiased, 0.8, 1.0);\n}\nfloat getLipsMask2() {\n    const vec2 sigmaScaling = vec2(1.5, 1.0);\n    const float upDirectionBias = 0.15;\n    // vec2 lipsCenterBiased = lipsCenter.xy - sign(stableToImage[1][1]) * lipsPlainSize.y * upDirectionBias;\n    vec2 lipsCenterBiased = lipsCenter.xy;\n    // vec2 lipsPlaineSizeBiased = vec2(0.9, 1.0 - upDirectionBias) * lipsPlainSize;\n    vec2 lipsPlaineSizeBiased = lipsPlainSize;\n    return getEllipseMask(sigmaScaling, position.xy, lipsCenterBiased, lipsPlaineSizeBiased, 1.0, 1.2);\n}\nfloat getNoseMask() {\n    const vec2 sigmaScaling = vec2(1.2, 1.5);\n    return getEllipseMask(sigmaScaling, position.xy, noseCenter.xy, nosePlainSize, 0.8, 1.0);\n}\nvec3 getScaledLipsPoint(in vec3 originalPoint, in vec3 scalingFactors,\n    in float scalingCoefficient, in float lipsMask) {\n    if (scalingCoefficient == 0.0) {\n        return originalPoint;\n    }\n    vec3 lipsScaledPoint = lipsCenter + scalingFactors * (originalPoint - lipsCenter);\n    return mix(originalPoint, lipsScaledPoint, scalingCoefficient * lipsMask);\n}\n\nvec3 getScaledLipsPoint2(vec3 originalPoint, vec3 center, float theta, float scale) {\n    float sin_t = sin(theta);\n    float cos_t = cos(theta);\n    vec2 v = (originalPoint - center).xy;\n    float d = dot(v, vec2(cos_t, sin_t));\n    d = d * scale;\n    vec2 dv = d * vec2(cos_t, sin_t);\n\n    return vec3(originalPoint.xy+dv, originalPoint.z);\n}\n\nvec2 getTransformYFactors() {\n    const float kDistanceYRatio = 0.1;\n    return kDistanceYRatio * (noseCenter.xy - lipsCenter.xy) / 2.0;\n}\n\nvoid main() {\n    const float pi = 3.1415926;\n    const float kScalingFactor = 1.3;\n    vec2 originalPosition = position.xy;\n    vec2 faceFrameCoords = originalPosition;\n    // float teethRegionWeight = texture2D(teethRegionMask, faceFrameCoords).r;\n    float teethRegionWeight = 0.0;\n    float noseMask = getNoseMask();\n    float lipsMask = getLipsMask() * (1.0 - teethRegionWeight) * (1.0 - noseMask);\n    float lipsMask2 = getLipsMask2() * (1.0 - teethRegionWeight) * (1.0 - noseMask);\n    vec3 displacedLipsPoint = position.xyz;\n    const vec3 kLipsWidthFactors = vec3(kScalingFactor, 1.0, 1.0);\n    displacedLipsPoint = mix(displacedLipsPoint, getScaledLipsPoint2(displacedLipsPoint, lipsCenter, angles.z, 0.3), lipsWidth * lipsMask);\n\n    const vec3 kLipsHeightFactors = vec3(1.0, kScalingFactor, 1.0);\n    displacedLipsPoint = mix(displacedLipsPoint, getScaledLipsPoint2(displacedLipsPoint, lipsCenter, pi/2.0 + angles.z, 0.3), lipsHeight * lipsMask);\n\n    const vec3 kLipsSizeFactors = vec3(kScalingFactor, kScalingFactor, 1.0);\n    displacedLipsPoint = getScaledLipsPoint(displacedLipsPoint, kLipsSizeFactors, lipsSize, lipsMask);\n\n    vec2 lipsYFactors = getTransformYFactors();\n    vec3 lipsTransformYPoint = vec3(displacedLipsPoint.xy + lipsYFactors, displacedLipsPoint.z);\n    displacedLipsPoint = mix(displacedLipsPoint, lipsTransformYPoint, lipsYPosition * lipsMask2);\n\n    vec2 displacedPosition = displacedLipsPoint.xy;\n    textureCoordinate = displacedPosition;\n    gl_Position = vec4(originalPosition.x*2.0-1.0, originalPosition.y*2.0-1.0, 0.0, 1.0);\n    //if(getNoseMask() > 0.0) {\n    //    textureCoordinate = vec2(1.0, 0.0);\n    //} else {\n    //    textureCoordinate = vec2(0.0, 0.0);\n    //}\n}";
  public static final String VERTEX_SHADER_VTF = "precision highp float;\n//uniform mat4 projection;\n//uniform mat4 faceFrame;\n//uniform mat4 stableToImage;\nuniform vec2 lipsPlainSize;\nuniform vec3 lipsCenter;\nuniform vec2 nosePlainSize;\nuniform vec3 noseCenter;\nuniform float lipsSize;\nuniform float lipsWidth;\nuniform float lipsHeight;\nuniform float lipsYPosition;\n//uniform sampler2D teethRegionMask;\nattribute vec4 position;\n//attribute float faceIndex;\n//attribute float depthValue;\nvarying vec2 textureCoordinate;\nuniform vec3 angles; // angles.x: pitch, angles.y: yaw, angles.z: roll\nuniform vec2 size;\n\nuniform sampler2D inputImageTexture;\n\nfloat my_smoothstep(float edge0, float edge1, float x) {\n    float t = clamp((x - edge0) / (edge1 - edge0), 0.0, 1.0);\n    return t * t * (3.0 - 2.0 * t);\n}\n\nfloat getEllipseMask(in vec2 sigmaScaling, in vec2 point,in vec2 center, in vec2 boundingSize, float a1, float a2) {\n    // un-normalization\n    boundingSize = boundingSize * size;\n    point = point * size;\n    center = center * size;\n\n    float cos_t = cos(angles.z);\n    float sin_t = sin(angles.z);\n    vec2 translate = (point - center);\n    // rotate and scale\n    vec2 v = vec2(dot(translate, vec2(cos_t, sin_t)), dot(translate, vec2(-sin_t, cos_t))) * sigmaScaling;\n\n    float d2 = sqrt(dot(v / boundingSize, v / boundingSize));\n\n    return 1.0 - my_smoothstep(a1, a2, d2);\n}\n\nfloat getLipsMask() {\n    const vec2 sigmaScaling = vec2(1.6, 1.5);\n    const float upDirectionBias = 0.15;\n    // vec2 lipsCenterBiased = lipsCenter.xy - sign(stableToImage[1][1]) * lipsPlainSize.y * upDirectionBias;\n    vec2 lipsCenterBiased = lipsCenter.xy;\n    // vec2 lipsPlaineSizeBiased = vec2(0.9, 1.0 - upDirectionBias) * lipsPlainSize;\n    vec2 lipsPlaineSizeBiased = lipsPlainSize;\n    return getEllipseMask(sigmaScaling, position.xy, lipsCenterBiased, lipsPlaineSizeBiased, 0.8, 1.0);\n}\nfloat getLipsMask2() {\n    const vec2 sigmaScaling = vec2(1.5, 1.0);\n    const float upDirectionBias = 0.15;\n    // vec2 lipsCenterBiased = lipsCenter.xy - sign(stableToImage[1][1]) * lipsPlainSize.y * upDirectionBias;\n    vec2 lipsCenterBiased = lipsCenter.xy;\n    // vec2 lipsPlaineSizeBiased = vec2(0.9, 1.0 - upDirectionBias) * lipsPlainSize;\n    vec2 lipsPlaineSizeBiased = lipsPlainSize;\n    return getEllipseMask(sigmaScaling, position.xy, lipsCenterBiased, lipsPlaineSizeBiased, 1.0, 1.2);\n}\nfloat getNoseMask() {\n    const vec2 sigmaScaling = vec2(1.2, 1.5);\n    return getEllipseMask(sigmaScaling, position.xy, noseCenter.xy, nosePlainSize, 0.8, 1.0);\n}\nvec3 getScaledLipsPoint(in vec3 originalPoint, in vec3 scalingFactors,\n    in float scalingCoefficient, in float lipsMask) {\n    if (scalingCoefficient == 0.0) {\n        return originalPoint;\n    }\n    vec3 lipsScaledPoint = lipsCenter + scalingFactors * (originalPoint - lipsCenter);\n    return mix(originalPoint, lipsScaledPoint, scalingCoefficient * lipsMask);\n}\n\nvec3 getScaledLipsPoint2(vec3 originalPoint, vec3 center, float theta, float scale) {\n    float sin_t = sin(theta);\n    float cos_t = cos(theta);\n    vec2 v = (originalPoint - center).xy;\n    float d = dot(v, vec2(cos_t, sin_t));\n    d = d * scale;\n    vec2 dv = d * vec2(cos_t, sin_t);\n\n    return vec3(originalPoint.xy+dv, originalPoint.z);\n}\n\nvec2 getTransformYFactors() {\n    const float kDistanceYRatio = 0.1;\n    return kDistanceYRatio * (noseCenter.xy - lipsCenter.xy) / 2.0;\n}\n\nvoid main() {\n    const float pi = 3.1415926;\n    const float kScalingFactor = 1.3;\n    vec2 originalPosition = position.xy;\n    vec2 faceFrameCoords = originalPosition;\n    // float teethRegionWeight = texture2D(teethRegionMask, faceFrameCoords).r;\n    float teethRegionWeight = 0.0;\n    float noseMask = getNoseMask();\n    float lipsMask = getLipsMask() * (1.0 - teethRegionWeight) * (1.0 - noseMask);\n    float lipsMask2 = getLipsMask2() * (1.0 - teethRegionWeight) * (1.0 - noseMask);\n    vec3 displacedLipsPoint = position.xyz;\n    const vec3 kLipsWidthFactors = vec3(kScalingFactor, 1.0, 1.0);\n    displacedLipsPoint = mix(displacedLipsPoint, getScaledLipsPoint2(displacedLipsPoint, lipsCenter, angles.z, 0.3), lipsWidth * lipsMask);\n\n    const vec3 kLipsHeightFactors = vec3(1.0, kScalingFactor, 1.0);\n    displacedLipsPoint = mix(displacedLipsPoint, getScaledLipsPoint2(displacedLipsPoint, lipsCenter, pi/2.0 + angles.z, 0.3), lipsHeight * lipsMask);\n\n    const vec3 kLipsSizeFactors = vec3(kScalingFactor, kScalingFactor, 1.0);\n    displacedLipsPoint = getScaledLipsPoint(displacedLipsPoint, kLipsSizeFactors, lipsSize, lipsMask);\n\n    vec2 lipsYFactors = getTransformYFactors();\n    vec3 lipsTransformYPoint = vec3(displacedLipsPoint.xy + lipsYFactors, displacedLipsPoint.z);\n    displacedLipsPoint = mix(displacedLipsPoint, lipsTransformYPoint, lipsYPosition * lipsMask2);\n\n    vec2 displacedPosition = displacedLipsPoint.xy;\n    vec4 color = texture2D(inputImageTexture, position.xy);\n    vec2 offset = (color.xy * 255.0 + color.zw) / 127.5 - 1.0;\n    textureCoordinate = offset + displacedPosition - originalPosition;\n\n    gl_Position = vec4(originalPosition.x*2.0-1.0, originalPosition.y*2.0-1.0, 0.0, 1.0);\n    //if(getNoseMask() > 0.0) {\n    //    textureCoordinate = vec2(1.0, 0.0);\n    //} else {\n    //    textureCoordinate = vec2(0.0, 0.0);\n    //}\n}";
  private static final int XCOORD_NUM = 128;
  private static final int YCOORD_NUM = 128;
  private static List<PointF> mFullscreenVerticesPortrait = VideoMaterial.genFullScreenVertices(128, 128, 0.0F, 1.0F, 0.0F, 1.0F);
  private static List<PointF> mInitTextureCoordinatesPortrait = VideoMaterial.genFullScreenVertices(128, 128, 0.0F, 1.0F, 0.0F, 1.0F);
  private float[] angles;
  private float[] lipsCenter = { 0.0F, 0.0F, 0.0F };
  private float lipsHeight;
  private float[] lipsPlainSize = { 0.0F, 0.0F };
  private float lipsSize;
  private float lipsWidth;
  private float lipsYPosition;
  private float meshType;
  private float[] noseCenter = { 0.0F, 0.0F, 0.0F };
  private float[] nosePlainSize = { 0.0F, 0.0F };
  private float[] size;
  
  public ReshapeLipsFilter(ReshapeType paramReshapeType)
  {
    super("precision highp float;\n//uniform mat4 projection;\n//uniform mat4 faceFrame;\n//uniform mat4 stableToImage;\nuniform vec2 lipsPlainSize;\nuniform vec3 lipsCenter;\nuniform vec2 nosePlainSize;\nuniform vec3 noseCenter;\nuniform float lipsSize;\nuniform float lipsWidth;\nuniform float lipsHeight;\nuniform float lipsYPosition;\n//uniform sampler2D teethRegionMask;\nattribute vec4 position;\n//attribute float faceIndex;\n//attribute float depthValue;\nvarying vec2 textureCoordinate;\nuniform vec3 angles; // angles.x: pitch, angles.y: yaw, angles.z: roll\nuniform vec2 size;\n\nuniform sampler2D inputImageTexture;\n\nfloat my_smoothstep(float edge0, float edge1, float x) {\n    float t = clamp((x - edge0) / (edge1 - edge0), 0.0, 1.0);\n    return t * t * (3.0 - 2.0 * t);\n}\n\nfloat getEllipseMask(in vec2 sigmaScaling, in vec2 point,in vec2 center, in vec2 boundingSize, float a1, float a2) {\n    // un-normalization\n    boundingSize = boundingSize * size;\n    point = point * size;\n    center = center * size;\n\n    float cos_t = cos(angles.z);\n    float sin_t = sin(angles.z);\n    vec2 translate = (point - center);\n    // rotate and scale\n    vec2 v = vec2(dot(translate, vec2(cos_t, sin_t)), dot(translate, vec2(-sin_t, cos_t))) * sigmaScaling;\n\n    float d2 = sqrt(dot(v / boundingSize, v / boundingSize));\n\n    return 1.0 - my_smoothstep(a1, a2, d2);\n}\n\nfloat getLipsMask() {\n    const vec2 sigmaScaling = vec2(1.6, 1.5);\n    const float upDirectionBias = 0.15;\n    // vec2 lipsCenterBiased = lipsCenter.xy - sign(stableToImage[1][1]) * lipsPlainSize.y * upDirectionBias;\n    vec2 lipsCenterBiased = lipsCenter.xy;\n    // vec2 lipsPlaineSizeBiased = vec2(0.9, 1.0 - upDirectionBias) * lipsPlainSize;\n    vec2 lipsPlaineSizeBiased = lipsPlainSize;\n    return getEllipseMask(sigmaScaling, position.xy, lipsCenterBiased, lipsPlaineSizeBiased, 0.8, 1.0);\n}\nfloat getLipsMask2() {\n    const vec2 sigmaScaling = vec2(1.5, 1.0);\n    const float upDirectionBias = 0.15;\n    // vec2 lipsCenterBiased = lipsCenter.xy - sign(stableToImage[1][1]) * lipsPlainSize.y * upDirectionBias;\n    vec2 lipsCenterBiased = lipsCenter.xy;\n    // vec2 lipsPlaineSizeBiased = vec2(0.9, 1.0 - upDirectionBias) * lipsPlainSize;\n    vec2 lipsPlaineSizeBiased = lipsPlainSize;\n    return getEllipseMask(sigmaScaling, position.xy, lipsCenterBiased, lipsPlaineSizeBiased, 1.0, 1.2);\n}\nfloat getNoseMask() {\n    const vec2 sigmaScaling = vec2(1.2, 1.5);\n    return getEllipseMask(sigmaScaling, position.xy, noseCenter.xy, nosePlainSize, 0.8, 1.0);\n}\nvec3 getScaledLipsPoint(in vec3 originalPoint, in vec3 scalingFactors,\n    in float scalingCoefficient, in float lipsMask) {\n    if (scalingCoefficient == 0.0) {\n        return originalPoint;\n    }\n    vec3 lipsScaledPoint = lipsCenter + scalingFactors * (originalPoint - lipsCenter);\n    return mix(originalPoint, lipsScaledPoint, scalingCoefficient * lipsMask);\n}\n\nvec3 getScaledLipsPoint2(vec3 originalPoint, vec3 center, float theta, float scale) {\n    float sin_t = sin(theta);\n    float cos_t = cos(theta);\n    vec2 v = (originalPoint - center).xy;\n    float d = dot(v, vec2(cos_t, sin_t));\n    d = d * scale;\n    vec2 dv = d * vec2(cos_t, sin_t);\n\n    return vec3(originalPoint.xy+dv, originalPoint.z);\n}\n\nvec2 getTransformYFactors() {\n    const float kDistanceYRatio = 0.1;\n    return kDistanceYRatio * (noseCenter.xy - lipsCenter.xy) / 2.0;\n}\n\nvoid main() {\n    const float pi = 3.1415926;\n    const float kScalingFactor = 1.3;\n    vec2 originalPosition = position.xy;\n    vec2 faceFrameCoords = originalPosition;\n    // float teethRegionWeight = texture2D(teethRegionMask, faceFrameCoords).r;\n    float teethRegionWeight = 0.0;\n    float noseMask = getNoseMask();\n    float lipsMask = getLipsMask() * (1.0 - teethRegionWeight) * (1.0 - noseMask);\n    float lipsMask2 = getLipsMask2() * (1.0 - teethRegionWeight) * (1.0 - noseMask);\n    vec3 displacedLipsPoint = position.xyz;\n    const vec3 kLipsWidthFactors = vec3(kScalingFactor, 1.0, 1.0);\n    displacedLipsPoint = mix(displacedLipsPoint, getScaledLipsPoint2(displacedLipsPoint, lipsCenter, angles.z, 0.3), lipsWidth * lipsMask);\n\n    const vec3 kLipsHeightFactors = vec3(1.0, kScalingFactor, 1.0);\n    displacedLipsPoint = mix(displacedLipsPoint, getScaledLipsPoint2(displacedLipsPoint, lipsCenter, pi/2.0 + angles.z, 0.3), lipsHeight * lipsMask);\n\n    const vec3 kLipsSizeFactors = vec3(kScalingFactor, kScalingFactor, 1.0);\n    displacedLipsPoint = getScaledLipsPoint(displacedLipsPoint, kLipsSizeFactors, lipsSize, lipsMask);\n\n    vec2 lipsYFactors = getTransformYFactors();\n    vec3 lipsTransformYPoint = vec3(displacedLipsPoint.xy + lipsYFactors, displacedLipsPoint.z);\n    displacedLipsPoint = mix(displacedLipsPoint, lipsTransformYPoint, lipsYPosition * lipsMask2);\n\n    vec2 displacedPosition = displacedLipsPoint.xy;\n    textureCoordinate = displacedPosition;\n    gl_Position = vec4(originalPosition.x*2.0-1.0, originalPosition.y*2.0-1.0, 0.0, 1.0);\n    //if(getNoseMask() > 0.0) {\n    //    textureCoordinate = vec2(1.0, 0.0);\n    //} else {\n    //    textureCoordinate = vec2(0.0, 0.0);\n    //}\n}", "#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float; //支持高精度，限定浮点型为高精度\n#else\n    precision mediump float; //不支持高精度，限定浮点型为中精度\n#endif\n\nvarying vec2 textureCoordinate;\nuniform sampler2D inputImageTexture;\nvoid main()\n{\n    //gl_FragColor = vec4(inputTextureCoordinate.xy, vec2(0.0, 1.0));\n\n    //vec4 color = vec4(textureCoordinate.x*8.0+0.5, textureCoordinate.y*8.0+0.5, 0.5, 1.0);\n    //gl_FragColor = color;\n\n    //gl_FragColor = vec4(textureCoordinate, textureCoordinate.x, 1.0);\n\n    gl_FragColor = texture2D(inputImageTexture, textureCoordinate);\n}");
    float f = 0.0F;
    this.lipsSize = 0.0F;
    this.lipsWidth = 0.0F;
    this.lipsHeight = 0.0F;
    this.lipsYPosition = 0.0F;
    this.angles = new float[] { 0.0F, 0.0F, 0.0F };
    this.size = new float[] { 1.0F, 1.0F };
    this.meshType = 0.0F;
    if (paramReshapeType == ReshapeType.VTF) {
      updateFilterShader("precision highp float;\n//uniform mat4 projection;\n//uniform mat4 faceFrame;\n//uniform mat4 stableToImage;\nuniform vec2 lipsPlainSize;\nuniform vec3 lipsCenter;\nuniform vec2 nosePlainSize;\nuniform vec3 noseCenter;\nuniform float lipsSize;\nuniform float lipsWidth;\nuniform float lipsHeight;\nuniform float lipsYPosition;\n//uniform sampler2D teethRegionMask;\nattribute vec4 position;\n//attribute float faceIndex;\n//attribute float depthValue;\nvarying vec2 textureCoordinate;\nuniform vec3 angles; // angles.x: pitch, angles.y: yaw, angles.z: roll\nuniform vec2 size;\n\nuniform sampler2D inputImageTexture;\n\nfloat my_smoothstep(float edge0, float edge1, float x) {\n    float t = clamp((x - edge0) / (edge1 - edge0), 0.0, 1.0);\n    return t * t * (3.0 - 2.0 * t);\n}\n\nfloat getEllipseMask(in vec2 sigmaScaling, in vec2 point,in vec2 center, in vec2 boundingSize, float a1, float a2) {\n    // un-normalization\n    boundingSize = boundingSize * size;\n    point = point * size;\n    center = center * size;\n\n    float cos_t = cos(angles.z);\n    float sin_t = sin(angles.z);\n    vec2 translate = (point - center);\n    // rotate and scale\n    vec2 v = vec2(dot(translate, vec2(cos_t, sin_t)), dot(translate, vec2(-sin_t, cos_t))) * sigmaScaling;\n\n    float d2 = sqrt(dot(v / boundingSize, v / boundingSize));\n\n    return 1.0 - my_smoothstep(a1, a2, d2);\n}\n\nfloat getLipsMask() {\n    const vec2 sigmaScaling = vec2(1.6, 1.5);\n    const float upDirectionBias = 0.15;\n    // vec2 lipsCenterBiased = lipsCenter.xy - sign(stableToImage[1][1]) * lipsPlainSize.y * upDirectionBias;\n    vec2 lipsCenterBiased = lipsCenter.xy;\n    // vec2 lipsPlaineSizeBiased = vec2(0.9, 1.0 - upDirectionBias) * lipsPlainSize;\n    vec2 lipsPlaineSizeBiased = lipsPlainSize;\n    return getEllipseMask(sigmaScaling, position.xy, lipsCenterBiased, lipsPlaineSizeBiased, 0.8, 1.0);\n}\nfloat getLipsMask2() {\n    const vec2 sigmaScaling = vec2(1.5, 1.0);\n    const float upDirectionBias = 0.15;\n    // vec2 lipsCenterBiased = lipsCenter.xy - sign(stableToImage[1][1]) * lipsPlainSize.y * upDirectionBias;\n    vec2 lipsCenterBiased = lipsCenter.xy;\n    // vec2 lipsPlaineSizeBiased = vec2(0.9, 1.0 - upDirectionBias) * lipsPlainSize;\n    vec2 lipsPlaineSizeBiased = lipsPlainSize;\n    return getEllipseMask(sigmaScaling, position.xy, lipsCenterBiased, lipsPlaineSizeBiased, 1.0, 1.2);\n}\nfloat getNoseMask() {\n    const vec2 sigmaScaling = vec2(1.2, 1.5);\n    return getEllipseMask(sigmaScaling, position.xy, noseCenter.xy, nosePlainSize, 0.8, 1.0);\n}\nvec3 getScaledLipsPoint(in vec3 originalPoint, in vec3 scalingFactors,\n    in float scalingCoefficient, in float lipsMask) {\n    if (scalingCoefficient == 0.0) {\n        return originalPoint;\n    }\n    vec3 lipsScaledPoint = lipsCenter + scalingFactors * (originalPoint - lipsCenter);\n    return mix(originalPoint, lipsScaledPoint, scalingCoefficient * lipsMask);\n}\n\nvec3 getScaledLipsPoint2(vec3 originalPoint, vec3 center, float theta, float scale) {\n    float sin_t = sin(theta);\n    float cos_t = cos(theta);\n    vec2 v = (originalPoint - center).xy;\n    float d = dot(v, vec2(cos_t, sin_t));\n    d = d * scale;\n    vec2 dv = d * vec2(cos_t, sin_t);\n\n    return vec3(originalPoint.xy+dv, originalPoint.z);\n}\n\nvec2 getTransformYFactors() {\n    const float kDistanceYRatio = 0.1;\n    return kDistanceYRatio * (noseCenter.xy - lipsCenter.xy) / 2.0;\n}\n\nvoid main() {\n    const float pi = 3.1415926;\n    const float kScalingFactor = 1.3;\n    vec2 originalPosition = position.xy;\n    vec2 faceFrameCoords = originalPosition;\n    // float teethRegionWeight = texture2D(teethRegionMask, faceFrameCoords).r;\n    float teethRegionWeight = 0.0;\n    float noseMask = getNoseMask();\n    float lipsMask = getLipsMask() * (1.0 - teethRegionWeight) * (1.0 - noseMask);\n    float lipsMask2 = getLipsMask2() * (1.0 - teethRegionWeight) * (1.0 - noseMask);\n    vec3 displacedLipsPoint = position.xyz;\n    const vec3 kLipsWidthFactors = vec3(kScalingFactor, 1.0, 1.0);\n    displacedLipsPoint = mix(displacedLipsPoint, getScaledLipsPoint2(displacedLipsPoint, lipsCenter, angles.z, 0.3), lipsWidth * lipsMask);\n\n    const vec3 kLipsHeightFactors = vec3(1.0, kScalingFactor, 1.0);\n    displacedLipsPoint = mix(displacedLipsPoint, getScaledLipsPoint2(displacedLipsPoint, lipsCenter, pi/2.0 + angles.z, 0.3), lipsHeight * lipsMask);\n\n    const vec3 kLipsSizeFactors = vec3(kScalingFactor, kScalingFactor, 1.0);\n    displacedLipsPoint = getScaledLipsPoint(displacedLipsPoint, kLipsSizeFactors, lipsSize, lipsMask);\n\n    vec2 lipsYFactors = getTransformYFactors();\n    vec3 lipsTransformYPoint = vec3(displacedLipsPoint.xy + lipsYFactors, displacedLipsPoint.z);\n    displacedLipsPoint = mix(displacedLipsPoint, lipsTransformYPoint, lipsYPosition * lipsMask2);\n\n    vec2 displacedPosition = displacedLipsPoint.xy;\n    vec4 color = texture2D(inputImageTexture, position.xy);\n    vec2 offset = (color.xy * 255.0 + color.zw) / 127.5 - 1.0;\n    textureCoordinate = offset + displacedPosition - originalPosition;\n\n    gl_Position = vec4(originalPosition.x*2.0-1.0, originalPosition.y*2.0-1.0, 0.0, 1.0);\n    //if(getNoseMask() > 0.0) {\n    //    textureCoordinate = vec2(1.0, 0.0);\n    //} else {\n    //    textureCoordinate = vec2(0.0, 0.0);\n    //}\n}", "#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float; //支持高精度，限定浮点型为高精度\n#else\n    precision mediump float; //不支持高精度，限定浮点型为中精度\n#endif\n\nvarying vec2 textureCoordinate;\nuniform sampler2D inputImageTexture;\nvoid main()\n{\n\n    //vec2 diffPosition = textureCoordinate;\n    //float ddx = (diffPosition.x + 1.0) / 2.0;\n    //float ddy = (diffPosition.y + 1.0) / 2.0;\n    //diffPosition = vec2(ddx,ddy);\n    //vec2 a = fract(diffPosition * 255.0 / 256.0);\n    //vec2 b = fract(diffPosition * 255.0 * 255.0 / 256.0);\n    //gl_FragColor = vec4(a,b);\n\n    // 新版的 shader 颜色通道中记录的是位移偏移量，只有在最后 combinedFilter 才最终将所有 filter 的位移量叠加，去图上取点。这样的好处是：\n    // 1. 只有 128 * 128 个点\n    // 2. smoothstep 会更平滑，128 * 128 个点取插值，原来的处理方法会使像素点变模糊\n    // 3. 两个矩形交叠的地方，位移处理的先后顺序不影响结果（不能说这是好还是坏，因为 PS 的液化是作用在原图上的）\n\n    // 至于此处要改为 * 255 再 / 255 是为了提升精度（浮点纹理 iOS 不支持，而一个字节只能表示 256 个不同值）\n    // 本来小奇使用了浮点纹理，但是发现有机型不支持，不用浮点纹理又精度不够，所以采用这个方法，变成2个字节表示一个值，提升了精度。\n    vec2 diffPosition = textureCoordinate;\n    diffPosition = 0.5 * (diffPosition + 1.0) * 255.0;  // 0.5 * (diffPosition + 1.0) 是将(-1, 1)间的值转换到(0, 1)，\n    vec2 a = floor(diffPosition) / 255.0;\n    vec2 b = fract(diffPosition);\n    gl_FragColor = vec4(a, b);\n\n\n    //vec2 diffPosition = textureCoordinate;\n    //diffPosition = 0.5 * (diffPosition + 1.0) * 256.0;\n    //vec2 a = floor(diffPosition) / 256.0;\n    //vec2 b = fract(diffPosition);\n    //gl_FragColor = vec4(a, b);\n}\n");
    }
    if (paramReshapeType == ReshapeType.NORMAL) {
      f = 0.5F;
    }
    this.meshType = f;
    initParams();
  }
  
  public void ApplyGLSLFilter()
  {
    initParams();
    super.ApplyGLSLFilter();
    setDrawMode(AEOpenRenderConfig.DRAW_MODE.TRIANGLE_STRIP);
  }
  
  public void initAttribParams()
  {
    setPositions(VideoMaterial.toFlatArray((PointF[])mFullscreenVerticesPortrait.toArray(new PointF[0])), false);
    setTexCords(VideoMaterial.toFlatArray((PointF[])mInitTextureCoordinatesPortrait.toArray(new PointF[0])), false);
    setCoordNum(32897);
  }
  
  public void initParams()
  {
    addParam(new UniformParam.FloatsParam("noseCenter", this.noseCenter));
    addParam(new UniformParam.FloatsParam("nosePlainSize", this.nosePlainSize));
    addParam(new UniformParam.FloatsParam("lipsCenter", this.lipsCenter));
    addParam(new UniformParam.FloatsParam("lipsPlainSize", this.lipsPlainSize));
    addParam(new UniformParam.FloatParam("lipsSize", this.lipsSize));
    addParam(new UniformParam.FloatParam("lipsWidth", this.lipsWidth));
    addParam(new UniformParam.FloatParam("lipsHeight", this.lipsHeight));
    addParam(new UniformParam.FloatParam("lipsYPosition", this.lipsYPosition));
    addParam(new UniformParam.FloatsParam("angles", this.angles));
    addParam(new UniformParam.FloatsParam("size", this.size));
    addParam(new UniformParam.FloatParam("meshType", this.meshType));
  }
  
  public void setParam(Map<String, Object> paramMap)
  {
    if (paramMap.containsKey("noseCenter")) {
      this.noseCenter = ((float[])paramMap.get("noseCenter"));
    }
    if (paramMap.containsKey("nosePlainSize")) {
      this.nosePlainSize = ((float[])paramMap.get("nosePlainSize"));
    }
    if (paramMap.containsKey("lipsCenter")) {
      this.lipsCenter = ((float[])paramMap.get("lipsCenter"));
    }
    if (paramMap.containsKey("lipsPlainSize")) {
      this.lipsPlainSize = ((float[])paramMap.get("lipsPlainSize"));
    }
    if (paramMap.containsKey("lipsSize")) {
      this.lipsSize = (((Float)paramMap.get("lipsSize")).floatValue() * -0.006F);
    }
    if (paramMap.containsKey("lipsHeight")) {
      this.lipsHeight = (((Float)paramMap.get("lipsHeight")).floatValue() * -0.008F);
    }
    if (paramMap.containsKey("lipsWidth")) {
      this.lipsWidth = (((Float)paramMap.get("lipsWidth")).floatValue() * -0.006F);
    }
    if (paramMap.containsKey("lipsYPosition"))
    {
      this.lipsYPosition = (((Float)paramMap.get("lipsYPosition")).floatValue() * 0.01F);
      float f = this.lipsYPosition;
      if (f < 0.0F) {
        this.lipsYPosition = (f * 1.4F);
      }
    }
    if (paramMap.containsKey("angles")) {
      this.angles = ((float[])paramMap.get("angles"));
    }
    if (paramMap.containsKey("size")) {
      this.size = ((float[])paramMap.get("size"));
    }
    initParams();
  }
}


/* Location:           L:\local\mybackup\temp\qq_apk\com.tencent.mobileqq\classes15.jar
 * Qualified Name:     com.tencent.ttpic.openapi.filter.ReshapeLipsFilter
 * JD-Core Version:    0.7.0.1
 */