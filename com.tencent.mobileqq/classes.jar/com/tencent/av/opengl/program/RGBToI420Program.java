package com.tencent.av.opengl.program;

import com.tencent.av.opengl.shader.AttributeShaderParameter;
import com.tencent.av.opengl.shader.ShaderParameter;
import com.tencent.av.opengl.shader.UniformShaderParameter;

public class RGBToI420Program
  extends TextureProgram
{
  public RGBToI420Program()
  {
    super("uniform  mat4   uMatrix;\nuniform  mat4 uTextureMatrix;\nattribute vec2  aPosition ;\nvarying vec2 vTextureCoord;\nvoid main(void)\n{\nvec4 pos = vec4(aPosition, 0.0, 1.0);\n gl_Position = uMatrix * pos;\n vTextureCoord = (uTextureMatrix * (pos+vec4(0.5,0.5,0.0,0.0))).xy;\n}\n", "\n\nprecision highp float;\nprecision highp int;\nvarying vec2 vTextureCoord;\t\t\t\t//vTextureCoord;\nuniform sampler2D uTextureSampler0;\t\t\t// 原始纹理 rgba\nuniform float fWidth;\t\t\t// 纹理宽 短边\nuniform float fHeight;\t\t\t// 纹理高 长边\n\n\nvec4 averageSmapling(float x,float y,float dx,float dy){\n    vec4 c0=texture2D(uTextureSampler0,vec2(x,y));\n    vec4 c1=texture2D(uTextureSampler0,vec2(x+dx,y));\n    vec4 c2=texture2D(uTextureSampler0,vec2(x,y+dy));\n    vec4 c3=texture2D(uTextureSampler0,vec2(x+dx,y+dy));\n    return (c0+c1+c2+c3)/4.;\n}\n\nvec2 calcuBasePos(float t,float shifty,float textrureCoX,float textrureCoY){\n    vec2 pos=vec2(floor(fWidth*textrureCoX),floor(fHeight*textrureCoY));\n    return vec2(pos.x*t,mod(pos.y*shifty,fHeight));\n}\n\n//顶点旋转后，纹理坐标原点变为右下角，x轴向上，y轴向左\nvoid main() {\n\n    vec2 samplingPos =vec2(0.0,0.0);\n\tvec4 texel=vec4(0.0,0.0,0.0,0.0);\n\t\n\tvec3 offset = vec3(0.0, 0.5, 0.5);\n\t//颜色系数矩阵\n\tvec3 ycoeff = vec3(0.2990, 0.5870, 0.1140);\n\tvec3 ucoeff = vec3(-0.1687,-0.3313, 0.5);\n\tvec3 vcoeff = vec3(0.5,-0.4187,-0.0813);\n\n\tvec2 nowTxtPos = vTextureCoord;\n\tvec2 size = vec2(fWidth, fHeight);\n\n\tvec2 hehe =vec2(0.0,0.0);\n\n    float dx = 1.0/fWidth;\n    float dy = 1.0/fHeight;\n    // y 占1/4\n\tif(nowTxtPos.y <= 1.0 && nowTxtPos.y >= 0.75){ //1\n\t    //移到原点\n        //nowTxtPos.y = (nowTxtPos.y - 0.75)* 4.0;\n\t\t//nowTxtPos.x = nowTxtPos.x* 1.0;\n        // y base postion\n        //vec2 basePos1 = (nowTxtPos * size +hehe) ;\n        //vec2 basePos =vec2(int(basePos1.x),int(basePos1.y));//取整\n        vec2 basePos = calcuBasePos(1.0,4.0,nowTxtPos.x,nowTxtPos.y - 0.75);\n\t\tfloat y1,y2,y3,y4;\n\n\t\t//1\n\t\tbasePos.y -= 0.0;\n\t\tbasePos.x -= 0.0;\n\t\tsamplingPos =  basePos / size;\n\t\ttexel = texture2D(uTextureSampler0, samplingPos);\n\t\ty1 = dot(texel.rgb, ycoeff);\n\t\ty1 += offset.x;\n\n\t    //2\n\t\tbasePos.y-=1.0;\n\t\tsamplingPos = basePos/size;\n\t\ttexel = texture2D(uTextureSampler0, samplingPos);\n\t\ty2 = dot(texel.rgb, ycoeff);\n\t\ty2 += offset.x;\n\n\t    //3\n\t\tbasePos.y-=1.0;\n\t\tsamplingPos = basePos/size;\n\t\ttexel = texture2D(uTextureSampler0, samplingPos);\n\t\ty3 = dot(texel.rgb, ycoeff);\n\t\ty3 += offset.x;\n\n\t    //4\n\t\tbasePos.y-=1.0;\n\t\tsamplingPos = basePos/size;\n\t\ttexel = texture2D(uTextureSampler0, samplingPos);\n\t\ty4 = dot(texel.rgb, ycoeff);\n\t\ty4 += offset.x;\n\n\t\t//写入亮度值\n\t\tgl_FragColor = vec4(y1, y2, y3, y4);\n\n\t}\n\t//采集V\n\telse if(nowTxtPos.y >=0.625 && nowTxtPos.y < 0.75 && nowTxtPos.x >= 0.5)\n\t{\n\t\t//移到原点\n        //nowTxtPos.y = (nowTxtPos.y - 0.625)* 8.0;\n\n        //nowTxtPos.x = (nowTxtPos.x-0.5)* 2.0;\n\t\t//vec2 basePos1 = (nowTxtPos * size +hehe) ;//采样基准点\n        //vec2 basePos =vec2(int(basePos1.x),int(basePos1.y));//取整\n        vec2 basePos = calcuBasePos(2.0,8.0,nowTxtPos.x-0.5,nowTxtPos.y - 0.625);\n\t\t//得到像素坐标\n        float v1,v2,v3,v4;\n\n        //1\n        basePos.y -= 0.0;\n\t\tbasePos.x -= 0.0;\n\t\tsamplingPos = basePos/size;\n\t\ttexel = averageSmapling(samplingPos.x,samplingPos.y,dx,dy);\n\t\tv1 = dot(texel.rgb, vcoeff);\n\t\tv1 += offset.z;\n\t\t//2\n        basePos.y -= 2.0;\n\t\tsamplingPos = basePos/size;\n        texel = averageSmapling(samplingPos.x,samplingPos.y,dx,dy);\n\t\tv2 = dot(texel.rgb, vcoeff);\n\t\tv2 += offset.z;\n\t\t//3\n        basePos.y -= 2.0;\n\t\tsamplingPos = basePos/size;\n        texel = averageSmapling(samplingPos.x,samplingPos.y,dx,dy);\n\t\tv3 = dot(texel.rgb, vcoeff);\n\t\tv3 += offset.z;\n\t\t//4\n        basePos.y -= 2.0;\n\t\tsamplingPos = basePos/size;\n        texel = averageSmapling(samplingPos.x,samplingPos.y,dx,dy);\n\t\tv4 = dot(texel.rgb, vcoeff);\n\t\tv4 += offset.z;\n\n\n\t\t//写入V值\n        gl_FragColor = vec4(v1, v2, v3, v4);\n\n\t}\n\t//奇数行采集U\n\telse if(nowTxtPos.y >=0.625 && nowTxtPos.y < 0.75 && nowTxtPos.x <= 0.5 )\n\t{\n\n\t\t//移到原点\n        //nowTxtPos.y = (nowTxtPos.y - 0.625)* 8.0;\n        //nowTxtPos.x = nowTxtPos.x* 2.0;\n        //vec2 basePos1 = (nowTxtPos * size +hehe) ;//采样基准点\n        //vec2 basePos =vec2(int(basePos1.x),int(basePos1.y));//取整\n\n        vec2 basePos = calcuBasePos(2.0,8.0,nowTxtPos.x,nowTxtPos.y - 0.625);\n        //得到像素坐标\n        float u1,u2,u3,u4;\n\n        //1\n        basePos.y -= 0.0;\n        basePos.x += 0.0;\n\t\tsamplingPos = basePos/size;\n        texel = averageSmapling(samplingPos.x,samplingPos.y,dx,dy);\n\t\tu1 = dot(texel.rgb, ucoeff);\n\t\tu1 += offset.y;\n\t\t//2\n        basePos.y -= 2.0;\n\t\tsamplingPos = basePos/size;\n        texel = averageSmapling(samplingPos.x,samplingPos.y,dx,dy);\n\t\tu2 = dot(texel.rgb, ucoeff);\n\t\tu2 += offset.y;\n\t\t//3\n        basePos.y -= 2.0;\n\t\tsamplingPos = basePos/size;\n        texel = averageSmapling(samplingPos.x,samplingPos.y,dx,dy);\n\t\tu3 = dot(texel.rgb, ucoeff);\n\t\tu3 += offset.y;\n\t\t//4\n        basePos.y -= 2.0;\n\t\tsamplingPos = basePos/size;\n        texel = averageSmapling(samplingPos.x,samplingPos.y,dx,dy);\n\t\tu4 = dot(texel.rgb, ucoeff);\n\t\tu4 += offset.y;\n\n\t\t//写入U值\n        gl_FragColor = vec4(u1, u2, u3, u4);\n\t}\n\telse\n\t{\n\t\tgl_FragColor = vec4(0.0, 0.0, 1.0, 1.0);\n\t}\n}", new ShaderParameter[] { new AttributeShaderParameter("aPosition"), new UniformShaderParameter("uMatrix"), new UniformShaderParameter("uAlpha"), new UniformShaderParameter("uTextureMatrix"), new UniformShaderParameter("uTextureSampler0"), new UniformShaderParameter("uTextureSampler1"), new UniformShaderParameter("uTextureSampler2"), new UniformShaderParameter("fWidth"), new UniformShaderParameter("fHeight"), new UniformShaderParameter("colorMat"), new UniformShaderParameter("yuvFormat"), new UniformShaderParameter("leavel") }, false);
  }
}


/* Location:           L:\local\mybackup\temp\qq_apk\com.tencent.mobileqq\classes2.jar
 * Qualified Name:     com.tencent.av.opengl.program.RGBToI420Program
 * JD-Core Version:    0.7.0.1
 */