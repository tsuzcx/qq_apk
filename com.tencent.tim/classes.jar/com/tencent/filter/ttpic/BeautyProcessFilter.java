package com.tencent.filter.ttpic;

import com.tencent.filter.BaseFilter;

public class BeautyProcessFilter
  extends BaseFilter
{
  private static final String FRAGMENT_SHADER = " precision highp float;\n varying vec2 textureCoordinate;\n uniform sampler2D inputImageTexture;\n uniform sampler2D inputImageTexture2;\n uniform sampler2D inputImageTexture3;\n uniform sampler2D inputImageTexture4;\n uniform float curvehipass[256];\n uniform float curvewhiten[256];\n uniform float horStep;\n uniform float verStep;\n uniform float opttype;\n uniform float whiten;\n uniform float skinFilter;\n uniform float smoothMag;\n void main()\n {\n     vec4 ini_color = texture2D(inputImageTexture2, textureCoordinate);\n     vec4 blur_color = texture2D(inputImageTexture, textureCoordinate);\n\n     vec4 final = ini_color;\n     vec3 ret ;\n     if(opttype == 1.0){\n         float a  = ini_color.g - blur_color.a+0.5;\n\t\t a = clamp(a, 0.0001, 0.9999);\n         ini_color.a = 1.0;\n\n         float flag = step(a, 0.5);\n         a = mix(a/(2.0*(1.0-a)), 1.0 - (1.0-a)/(2.0*a), flag);\n         a = clamp(a, 0.0001, 0.9999);\n         a = mix(a/(2.0*(1.0-a)), 1.0 - (1.0-a)/(2.0*a), flag);\n         a = clamp(a, 0.0001, 0.9999);\n         a = mix(a/(2.0*(1.0-a)), 1.0 - (1.0-a)/(2.0*a), flag);\n         a = clamp(a, 0.0, 1.0);\n         if(a>0.2)\n             a = pow((a-0.2)*1.25, 0.5)/1.25+0.2;\n         a = smoothMag*(1.0-a);\n         a = clamp(a, 0.0, 0.3);\n         vec4 tmp;\n         tmp.a = 1.0;\n\n         tmp.r = texture2D(inputImageTexture3, vec2(ini_color.r,0.0)).r - ini_color.r;\n         tmp.g = texture2D(inputImageTexture3, vec2(ini_color.g,0.0)).g - ini_color.g;\n         tmp.b = texture2D(inputImageTexture3, vec2(ini_color.b,0.0)).b - ini_color.b;\n         vec4 final = ini_color + a*tmp;\n\n         float sum = 0.0;\n         sum += 0.25*texture2D(inputImageTexture2,textureCoordinate+vec2(horStep / 2.0, verStep / 2.0)).g;\n         sum += 0.25*texture2D(inputImageTexture2,textureCoordinate+vec2(-horStep / 2.0,-verStep / 2.0)).g;\n         sum += 0.25*texture2D(inputImageTexture2,textureCoordinate+vec2(-horStep / 2.0,verStep / 2.0)).g;\n         sum += 0.25*texture2D(inputImageTexture2,textureCoordinate+vec2(horStep / 2.0,-verStep / 2.0)).g;\n\n         a = ini_color.g-sum+0.5;\n\n         flag = step(0.5, a);\n\n         vec4 color = mix((2.0*a*final), (1.0-2.0*(1.0-a)*(1.0-final)), flag);\n\n         ret = 0.8*color.rgb+0.2*final.rgb;\n     }\n     else{\n         ret = ini_color.rgb;\n     }\n\n\n   vec3 tmp;\n     tmp.r = texture2D(inputImageTexture4, vec2(ret.r,0.0)).r;\n     tmp.g = texture2D(inputImageTexture4, vec2(ret.g,0.0)).r;\n     tmp.b = texture2D(inputImageTexture4, vec2(ret.b,0.0)).r;\n     vec3 result= whiten*(tmp - ret.rgb)+ret.rgb;\n     result = (result - 0.5) * 1.08 + 0.5;     if (skinFilter > 0.5){\n         float cg1 = dot(vec3(-81.085,112.0,-30.915), final.rgb);\n         float cr1 = dot(vec3(-37.797,-74.203,112.0), final.rgb);\n         \n         float cg = cg1+128.0-114.0;\n         float cr = cr1+128.0-112.0;\n         \n         float v = max(sqrt(cg*cg+cr*cr)-14.0, 0.0);\n         float s = pow(2.718281828459, -v/4.0);\n         float gray = dot(vec3(0.3,0.6,0.1), final.rgb);\n         float s1 = min(1.0, gray/0.25);\n         s *= (s1*s1);\n         \n         s = min(1.0, s);\n         result = s*result.rgb+(1.0-s)*ini_color.rgb;\n     }\n     gl_FragColor = vec4(result.rgb, 1.0);\n }";
  
  public BeautyProcessFilter()
  {
    super(" precision highp float;\n varying vec2 textureCoordinate;\n uniform sampler2D inputImageTexture;\n uniform sampler2D inputImageTexture2;\n uniform sampler2D inputImageTexture3;\n uniform sampler2D inputImageTexture4;\n uniform float curvehipass[256];\n uniform float curvewhiten[256];\n uniform float horStep;\n uniform float verStep;\n uniform float opttype;\n uniform float whiten;\n uniform float skinFilter;\n uniform float smoothMag;\n void main()\n {\n     vec4 ini_color = texture2D(inputImageTexture2, textureCoordinate);\n     vec4 blur_color = texture2D(inputImageTexture, textureCoordinate);\n\n     vec4 final = ini_color;\n     vec3 ret ;\n     if(opttype == 1.0){\n         float a  = ini_color.g - blur_color.a+0.5;\n\t\t a = clamp(a, 0.0001, 0.9999);\n         ini_color.a = 1.0;\n\n         float flag = step(a, 0.5);\n         a = mix(a/(2.0*(1.0-a)), 1.0 - (1.0-a)/(2.0*a), flag);\n         a = clamp(a, 0.0001, 0.9999);\n         a = mix(a/(2.0*(1.0-a)), 1.0 - (1.0-a)/(2.0*a), flag);\n         a = clamp(a, 0.0001, 0.9999);\n         a = mix(a/(2.0*(1.0-a)), 1.0 - (1.0-a)/(2.0*a), flag);\n         a = clamp(a, 0.0, 1.0);\n         if(a>0.2)\n             a = pow((a-0.2)*1.25, 0.5)/1.25+0.2;\n         a = smoothMag*(1.0-a);\n         a = clamp(a, 0.0, 0.3);\n         vec4 tmp;\n         tmp.a = 1.0;\n\n         tmp.r = texture2D(inputImageTexture3, vec2(ini_color.r,0.0)).r - ini_color.r;\n         tmp.g = texture2D(inputImageTexture3, vec2(ini_color.g,0.0)).g - ini_color.g;\n         tmp.b = texture2D(inputImageTexture3, vec2(ini_color.b,0.0)).b - ini_color.b;\n         vec4 final = ini_color + a*tmp;\n\n         float sum = 0.0;\n         sum += 0.25*texture2D(inputImageTexture2,textureCoordinate+vec2(horStep / 2.0, verStep / 2.0)).g;\n         sum += 0.25*texture2D(inputImageTexture2,textureCoordinate+vec2(-horStep / 2.0,-verStep / 2.0)).g;\n         sum += 0.25*texture2D(inputImageTexture2,textureCoordinate+vec2(-horStep / 2.0,verStep / 2.0)).g;\n         sum += 0.25*texture2D(inputImageTexture2,textureCoordinate+vec2(horStep / 2.0,-verStep / 2.0)).g;\n\n         a = ini_color.g-sum+0.5;\n\n         flag = step(0.5, a);\n\n         vec4 color = mix((2.0*a*final), (1.0-2.0*(1.0-a)*(1.0-final)), flag);\n\n         ret = 0.8*color.rgb+0.2*final.rgb;\n     }\n     else{\n         ret = ini_color.rgb;\n     }\n\n\n   vec3 tmp;\n     tmp.r = texture2D(inputImageTexture4, vec2(ret.r,0.0)).r;\n     tmp.g = texture2D(inputImageTexture4, vec2(ret.g,0.0)).r;\n     tmp.b = texture2D(inputImageTexture4, vec2(ret.b,0.0)).r;\n     vec3 result= whiten*(tmp - ret.rgb)+ret.rgb;\n     result = (result - 0.5) * 1.08 + 0.5;     if (skinFilter > 0.5){\n         float cg1 = dot(vec3(-81.085,112.0,-30.915), final.rgb);\n         float cr1 = dot(vec3(-37.797,-74.203,112.0), final.rgb);\n         \n         float cg = cg1+128.0-114.0;\n         float cr = cr1+128.0-112.0;\n         \n         float v = max(sqrt(cg*cg+cr*cr)-14.0, 0.0);\n         float s = pow(2.718281828459, -v/4.0);\n         float gray = dot(vec3(0.3,0.6,0.1), final.rgb);\n         float s1 = min(1.0, gray/0.25);\n         s *= (s1*s1);\n         \n         s = min(1.0, s);\n         result = s*result.rgb+(1.0-s)*ini_color.rgb;\n     }\n     gl_FragColor = vec4(result.rgb, 1.0);\n }");
  }
}


/* Location:           L:\local\mybackup\temp\qq_apk\com.tencent.tim\classes7.jar
 * Qualified Name:     com.tencent.filter.ttpic.BeautyProcessFilter
 * JD-Core Version:    0.7.0.1
 */