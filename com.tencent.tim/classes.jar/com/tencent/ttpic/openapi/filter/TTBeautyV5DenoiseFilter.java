package com.tencent.ttpic.openapi.filter;

import com.tencent.aekit.openrender.UniformParam.Float2fParam;
import com.tencent.aekit.openrender.UniformParam.TextureParam;
import com.tencent.filter.BaseFilter;

public class TTBeautyV5DenoiseFilter
  extends BaseFilter
{
  private static final String FRAGMENT_SHADER = "varying highp vec2 textureCoordinate;\n varying highp vec2 textureCoordsLU;\n varying highp vec2 textureCoordsU;\n varying highp vec2 textureCoordsRU;\n varying highp vec2 textureCoordsL;\n varying highp vec2 textureCoordsR;\n varying highp vec2 textureCoordsLD;\n varying highp vec2 textureCoordsD;\n varying highp vec2 textureCoordsRD;\n \n uniform sampler2D inputImageTexture;\n uniform sampler2D inputImageTexture2;\n \n const mediump vec3 luminanceWeighting = vec3(0.2125, 0.7154, 0.0721);\n \n lowp vec4 denoiseColor(sampler2D curFrameTex, sampler2D lastFrameTex) {\n     lowp vec4 curColor = texture2D(curFrameTex, textureCoordinate);\n//     lowp vec4 curColorLU = texture2D(curFrameTex, textureCoordsLU);\n     lowp vec4 curColorU = texture2D(curFrameTex, textureCoordsU);\n//     lowp vec4 curColorRU = texture2D(curFrameTex, textureCoordsRU);\n     lowp vec4 curColorL = texture2D(curFrameTex, textureCoordsL);\n     lowp vec4 curColorR = texture2D(curFrameTex, textureCoordsR);\n//     lowp vec4 curColorLD = texture2D(curFrameTex, textureCoordsLD);\n     lowp vec4 curColorD = texture2D(curFrameTex, textureCoordsD);\n//     lowp vec4 curColorRD = texture2D(curFrameTex, textureCoordsRD);\n//     highp vec3 curMean = (curColor.rgb + curColorLU.rgb + curColorU.rgb + curColorRU.rgb + curColorL.rgb + curColorR.rgb + curColorLD.rgb + curColorD.rgb + curColorRD.rgb) / 9.0;\n     highp vec3 curMean = (curColor.rgb + curColorU.rgb + curColorL.rgb + curColorR.rgb + curColorD.rgb) / 5.0;\n     highp float curLuminance = dot(curMean.rgb, luminanceWeighting);\n     \n     lowp vec4 lastColor = texture2D(lastFrameTex, textureCoordinate);\n//     lowp vec4 lastColorLU = texture2D(lastFrameTex, textureCoordsLU);\n     lowp vec4 lastColorU = texture2D(lastFrameTex, textureCoordsU);\n//     lowp vec4 lastColorRU = texture2D(lastFrameTex, textureCoordsRU);\n     lowp vec4 lastColorL = texture2D(lastFrameTex, textureCoordsL);\n     lowp vec4 lastColorR = texture2D(lastFrameTex, textureCoordsR);\n//     lowp vec4 lastColorLD = texture2D(lastFrameTex, textureCoordsLD);\n     lowp vec4 lastColorD = texture2D(lastFrameTex, textureCoordsD);\n//     lowp vec4 lastColorRD = texture2D(lastFrameTex, textureCoordsRD);\n//     highp vec3 lastMean = (lastColor.rgb + lastColorLU.rgb + lastColorU.rgb + lastColorRU.rgb + lastColorL.rgb + lastColorR.rgb + lastColorLD.rgb + lastColorD.rgb + lastColorRD.rgb) / 9.0;\n     highp vec3 lastMean = (lastColor.rgb + lastColorU.rgb + lastColorL.rgb + lastColorR.rgb + lastColorD.rgb) / 5.0;\n     highp float lastLuminance = dot(lastMean.rgb, luminanceWeighting);\n     \n     highp float lumDelta = abs(curLuminance - lastLuminance);\n     highp float lumWeight = 1.0 + 0.02 * lumDelta * lumDelta * 255.0 * 255.0;\n     highp float mixAlpha = lumWeight / (lumWeight + 1.5);\n     lowp vec4 resultColor = mix(lastColor, curColor, mixAlpha);\n     return resultColor;\n }\n \n void main() {\n     gl_FragColor = denoiseColor(inputImageTexture, inputImageTexture2);\n }\n";
  private static final String VERTEX_SHADER = "attribute vec4 position;\n attribute vec4 inputTextureCoordinate;\n \n uniform vec2 canvasSize;\n \n varying vec2 textureCoordinate;\n varying vec2 textureCoordsLU;\n varying vec2 textureCoordsU;\n varying vec2 textureCoordsRU;\n varying vec2 textureCoordsL;\n varying vec2 textureCoordsR;\n varying vec2 textureCoordsLD;\n varying vec2 textureCoordsD;\n varying vec2 textureCoordsRD;\n \n void main()\n {\n     highp float stepX = 1.5 / canvasSize.x;\n     highp float stepY = 1.5 / canvasSize.y;\n     \n     gl_Position = position;\n     textureCoordinate = inputTextureCoordinate.xy;\n     textureCoordsLU = vec2(textureCoordinate.x-stepX, textureCoordinate.y+stepY);\n     textureCoordsU = vec2(textureCoordinate.x, textureCoordinate.y+stepY);\n     textureCoordsRU = vec2(textureCoordinate.x+stepX, textureCoordinate.y+stepY);\n     textureCoordsL = vec2(textureCoordinate.x-stepX, textureCoordinate.y);\n     textureCoordsR = vec2(textureCoordinate.x+stepX, textureCoordinate.y);\n     textureCoordsLD = vec2(textureCoordinate.x-stepX, textureCoordinate.y-stepY);\n     textureCoordsD = vec2(textureCoordinate.x, textureCoordinate.y-stepY);\n     textureCoordsRD = vec2(textureCoordinate.x+stepX, textureCoordinate.y-stepY);\n }\n";
  
  public TTBeautyV5DenoiseFilter()
  {
    super("attribute vec4 position;\n attribute vec4 inputTextureCoordinate;\n \n uniform vec2 canvasSize;\n \n varying vec2 textureCoordinate;\n varying vec2 textureCoordsLU;\n varying vec2 textureCoordsU;\n varying vec2 textureCoordsRU;\n varying vec2 textureCoordsL;\n varying vec2 textureCoordsR;\n varying vec2 textureCoordsLD;\n varying vec2 textureCoordsD;\n varying vec2 textureCoordsRD;\n \n void main()\n {\n     highp float stepX = 1.5 / canvasSize.x;\n     highp float stepY = 1.5 / canvasSize.y;\n     \n     gl_Position = position;\n     textureCoordinate = inputTextureCoordinate.xy;\n     textureCoordsLU = vec2(textureCoordinate.x-stepX, textureCoordinate.y+stepY);\n     textureCoordsU = vec2(textureCoordinate.x, textureCoordinate.y+stepY);\n     textureCoordsRU = vec2(textureCoordinate.x+stepX, textureCoordinate.y+stepY);\n     textureCoordsL = vec2(textureCoordinate.x-stepX, textureCoordinate.y);\n     textureCoordsR = vec2(textureCoordinate.x+stepX, textureCoordinate.y);\n     textureCoordsLD = vec2(textureCoordinate.x-stepX, textureCoordinate.y-stepY);\n     textureCoordsD = vec2(textureCoordinate.x, textureCoordinate.y-stepY);\n     textureCoordsRD = vec2(textureCoordinate.x+stepX, textureCoordinate.y-stepY);\n }\n", "varying highp vec2 textureCoordinate;\n varying highp vec2 textureCoordsLU;\n varying highp vec2 textureCoordsU;\n varying highp vec2 textureCoordsRU;\n varying highp vec2 textureCoordsL;\n varying highp vec2 textureCoordsR;\n varying highp vec2 textureCoordsLD;\n varying highp vec2 textureCoordsD;\n varying highp vec2 textureCoordsRD;\n \n uniform sampler2D inputImageTexture;\n uniform sampler2D inputImageTexture2;\n \n const mediump vec3 luminanceWeighting = vec3(0.2125, 0.7154, 0.0721);\n \n lowp vec4 denoiseColor(sampler2D curFrameTex, sampler2D lastFrameTex) {\n     lowp vec4 curColor = texture2D(curFrameTex, textureCoordinate);\n//     lowp vec4 curColorLU = texture2D(curFrameTex, textureCoordsLU);\n     lowp vec4 curColorU = texture2D(curFrameTex, textureCoordsU);\n//     lowp vec4 curColorRU = texture2D(curFrameTex, textureCoordsRU);\n     lowp vec4 curColorL = texture2D(curFrameTex, textureCoordsL);\n     lowp vec4 curColorR = texture2D(curFrameTex, textureCoordsR);\n//     lowp vec4 curColorLD = texture2D(curFrameTex, textureCoordsLD);\n     lowp vec4 curColorD = texture2D(curFrameTex, textureCoordsD);\n//     lowp vec4 curColorRD = texture2D(curFrameTex, textureCoordsRD);\n//     highp vec3 curMean = (curColor.rgb + curColorLU.rgb + curColorU.rgb + curColorRU.rgb + curColorL.rgb + curColorR.rgb + curColorLD.rgb + curColorD.rgb + curColorRD.rgb) / 9.0;\n     highp vec3 curMean = (curColor.rgb + curColorU.rgb + curColorL.rgb + curColorR.rgb + curColorD.rgb) / 5.0;\n     highp float curLuminance = dot(curMean.rgb, luminanceWeighting);\n     \n     lowp vec4 lastColor = texture2D(lastFrameTex, textureCoordinate);\n//     lowp vec4 lastColorLU = texture2D(lastFrameTex, textureCoordsLU);\n     lowp vec4 lastColorU = texture2D(lastFrameTex, textureCoordsU);\n//     lowp vec4 lastColorRU = texture2D(lastFrameTex, textureCoordsRU);\n     lowp vec4 lastColorL = texture2D(lastFrameTex, textureCoordsL);\n     lowp vec4 lastColorR = texture2D(lastFrameTex, textureCoordsR);\n//     lowp vec4 lastColorLD = texture2D(lastFrameTex, textureCoordsLD);\n     lowp vec4 lastColorD = texture2D(lastFrameTex, textureCoordsD);\n//     lowp vec4 lastColorRD = texture2D(lastFrameTex, textureCoordsRD);\n//     highp vec3 lastMean = (lastColor.rgb + lastColorLU.rgb + lastColorU.rgb + lastColorRU.rgb + lastColorL.rgb + lastColorR.rgb + lastColorLD.rgb + lastColorD.rgb + lastColorRD.rgb) / 9.0;\n     highp vec3 lastMean = (lastColor.rgb + lastColorU.rgb + lastColorL.rgb + lastColorR.rgb + lastColorD.rgb) / 5.0;\n     highp float lastLuminance = dot(lastMean.rgb, luminanceWeighting);\n     \n     highp float lumDelta = abs(curLuminance - lastLuminance);\n     highp float lumWeight = 1.0 + 0.02 * lumDelta * lumDelta * 255.0 * 255.0;\n     highp float mixAlpha = lumWeight / (lumWeight + 1.5);\n     lowp vec4 resultColor = mix(lastColor, curColor, mixAlpha);\n     return resultColor;\n }\n \n void main() {\n     gl_FragColor = denoiseColor(inputImageTexture, inputImageTexture2);\n }\n");
    initParams();
  }
  
  private void initParams()
  {
    addParam(new UniformParam.Float2fParam("canvasSize", 0.0F, 0.0F));
    addParam(new UniformParam.TextureParam("inputImageTexture2", 0, 33986));
  }
  
  public void setDenoiseTexture(int paramInt)
  {
    addParam(new UniformParam.TextureParam("inputImageTexture2", paramInt, 33986));
  }
  
  public void setSize(float paramFloat1, float paramFloat2)
  {
    addParam(new UniformParam.Float2fParam("canvasSize", paramFloat1, paramFloat2));
  }
}


/* Location:           L:\local\mybackup\temp\qq_apk\com.tencent.tim\classes12.jar
 * Qualified Name:     com.tencent.ttpic.openapi.filter.TTBeautyV5DenoiseFilter
 * JD-Core Version:    0.7.0.1
 */