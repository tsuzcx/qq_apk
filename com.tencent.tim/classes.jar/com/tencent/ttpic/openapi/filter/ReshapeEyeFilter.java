package com.tencent.ttpic.openapi.filter;

import android.graphics.PointF;
import com.tencent.aekit.openrender.AEOpenRenderConfig.DRAW_MODE;
import com.tencent.aekit.openrender.UniformParam.FloatParam;
import com.tencent.aekit.openrender.UniformParam.FloatsParam;
import com.tencent.aekit.openrender.internal.VideoFilterBase;
import com.tencent.ttpic.openapi.util.VideoMaterialUtil;
import java.util.List;
import java.util.Map;

public class ReshapeEyeFilter
  extends VideoFilterBase
{
  public static final String FRAGMENT_SHADER_NORMAL = "#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float; //支持高精度，限定浮点型为高精度\n#else\n    precision mediump float; //不支持高精度，限定浮点型为中精度\n#endif\n\nvarying vec2 textureCoordinate;\nuniform sampler2D inputImageTexture;\nvoid main()\n{\n    //gl_FragColor = vec4(inputTextureCoordinate.xy, vec2(0.0, 1.0));\n\n    //vec4 color = vec4(textureCoordinate.x*8.0+0.5, textureCoordinate.y*8.0+0.5, 0.5, 1.0);\n    //gl_FragColor = color;\n\n    //gl_FragColor = vec4(textureCoordinate, textureCoordinate.x, 1.0);\n\n    gl_FragColor = texture2D(inputImageTexture, textureCoordinate);\n}";
  public static final String FRAGMENT_SHADER_VTF = "#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float; //支持高精度，限定浮点型为高精度\n#else\n    precision mediump float; //不支持高精度，限定浮点型为中精度\n#endif\n\nvarying vec2 textureCoordinate;\nuniform sampler2D inputImageTexture;\nvoid main()\n{\n\n    //vec2 diffPosition = textureCoordinate;\n    //float ddx = (diffPosition.x + 1.0) / 2.0;\n    //float ddy = (diffPosition.y + 1.0) / 2.0;\n    //diffPosition = vec2(ddx,ddy);\n    //vec2 a = fract(diffPosition * 255.0 / 256.0);\n    //vec2 b = fract(diffPosition * 255.0 * 255.0 / 256.0);\n    //gl_FragColor = vec4(a,b);\n\n    // 新版的 shader 颜色通道中记录的是位移偏移量，只有在最后 combinedFilter 才最终将所有 filter 的位移量叠加，去图上取点。这样的好处是：\n    // 1. 只有 128 * 128 个点\n    // 2. smoothstep 会更平滑，128 * 128 个点取插值，原来的处理方法会使像素点变模糊\n    // 3. 两个矩形交叠的地方，位移处理的先后顺序不影响结果（不能说这是好还是坏，因为 PS 的液化是作用在原图上的）\n\n    // 至于此处要改为 * 255 再 / 255 是为了提升精度（浮点纹理 iOS 不支持，而一个字节只能表示 256 个不同值）\n    // 本来小奇使用了浮点纹理，但是发现有机型不支持，不用浮点纹理又精度不够，所以采用这个方法，变成2个字节表示一个值，提升了精度。\n    vec2 diffPosition = textureCoordinate;\n    diffPosition = 0.5 * (diffPosition + 1.0) * 255.0;  // 0.5 * (diffPosition + 1.0) 是将(-1, 1)间的值转换到(0, 1)，\n    vec2 a = floor(diffPosition) / 255.0;\n    vec2 b = fract(diffPosition);\n    gl_FragColor = vec4(a, b);\n\n\n    //vec2 diffPosition = textureCoordinate;\n    //diffPosition = 0.5 * (diffPosition + 1.0) * 256.0;\n    //vec2 a = floor(diffPosition) / 256.0;\n    //vec2 b = fract(diffPosition);\n    //gl_FragColor = vec4(a, b);\n}\n";
  public static final String VERTEX_SHADER_NORMAL = "precision highp float;\n//uniform mat4 projection;\n//uniform mat4 faceFrame;\n//uniform mat4 stableToImage;\nuniform vec2 leftEyePlainSize;\nuniform vec3 leftEyeCenter;\nuniform vec2 rightEyePlainSize;\nuniform vec3 rightEyeCenter;\nuniform float eyesSize; // it is eye size adjust factor\nuniform float eyesWidth; // it is eye width adjust factor\nuniform float eyesHeight; // it is eye height adjust factor\nuniform float eyesTiltAngle; // rotate angle need to apply\nuniform float eyesDistance;\nattribute vec4 position;\n//attribute float faceIndex;\n//attribute float depthValue;\nvarying vec2 textureCoordinate;\nuniform vec3 angles; // angles.x: pitch, angles.y: yaw, angles.z: roll\nuniform vec2 size;\n\nuniform sampler2D inputImageTexture;\n\nfloat my_smoothstep(float edge0, float edge1, float x) {\n    float t = clamp((x - edge0) / (edge1 - edge0), 0.0, 1.0);\n    return t * t * (3.0 - 2.0 * t);\n}\n\nfloat getElipseMask(in vec2 sigmaScaling, in vec2 point,in vec2 center, in vec2 boundingSize, float a1, float a2) {\n    // un-normalization\n    boundingSize = boundingSize * size;\n    point = point * size;\n    center = center * size;\n\n    float cos_t = cos(angles.z);\n    float sin_t = sin(angles.z);\n    vec2 translate = (point - center);\n    // rotate and scale\n    vec2 v = vec2(dot(translate, vec2(cos_t, sin_t)), dot(translate, vec2(-sin_t, cos_t))) * sigmaScaling;\n\n    float d2 = sqrt(dot(v / boundingSize, v / boundingSize));\n\n    return 1.0 - my_smoothstep(a1, a2, d2);\n}\n\nfloat getLeftEyeFineMask(in vec2 point) {\n    const vec2 sigmaScaling = vec2(1.25, 0.7);\n    return getElipseMask(sigmaScaling, point, leftEyeCenter.xy, leftEyePlainSize, 0.5, 1.2);\n}\nfloat getRightEyeFineMask(in vec2 point) {\n    const vec2 sigmaScaling = vec2(1.25, 0.7);\n    return getElipseMask(sigmaScaling, point, rightEyeCenter.xy, rightEyePlainSize, 0.5, 1.2);\n}\nfloat getLeftEyeCoarseMask(in vec2 point) {\n    const vec2 sigmaScaling = vec2(0.9, 0.8);\n    return getElipseMask(sigmaScaling, point, leftEyeCenter.xy, leftEyePlainSize, 0.7, 1.1);\n}\nfloat getRightEyeCoarseMask(in vec2 point) {\n    const vec2 sigmaScaling = vec2(0.9, 0.8);\n    return getElipseMask(sigmaScaling, point, rightEyeCenter.xy, rightEyePlainSize, 0.7, 1.1);\n}\nvec2 rotate2DPoint(vec2 point, float angle) {\n    return vec2(cos(angle) * point.x - sin(angle) * point.y, sin(angle) * point.x + cos(angle) * point.y);\n}\nvec3 getScaledEyesPoint(vec3 originalPoint, vec3 scalingFactors,float scalingFactor,float leftEyeMask, float rightEyeMask) {\n    if (scalingFactor == 0.0) {\n        return originalPoint;\n    }\n    vec3 eyesScaledPoint = originalPoint;\n    vec3 leftEyeScaledPoint = leftEyeCenter + scalingFactors * (originalPoint - leftEyeCenter);\n    eyesScaledPoint = mix(eyesScaledPoint, leftEyeScaledPoint, leftEyeMask);\n    vec3 rightEyeScaledPoint = rightEyeCenter + scalingFactors * (originalPoint - rightEyeCenter);\n    eyesScaledPoint = mix(eyesScaledPoint, rightEyeScaledPoint, rightEyeMask);\n    return mix(originalPoint, eyesScaledPoint, scalingFactor);\n}\nvec2 getEyesDistanceFactors() {\n    const float kEyesDistanceXRatio = 0.03662283339;\n    return vec2(abs(kEyesDistanceXRatio * (leftEyeCenter - rightEyeCenter).x), 0.0);\n}\nvec2 getEyesDistanceFactors2() {\n    const float kEyesDistanceXRatio = 0.03662283339;\n    return kEyesDistanceXRatio * vec2(leftEyeCenter.x - rightEyeCenter.x, leftEyeCenter.y - rightEyeCenter.y);\n}\n\nvec3 getScaledEyesPoint2(vec3 originalPoint, float scalingFactor, float theta, float leftEyeMask, float rightEyeMask) {\n    if (scalingFactor == 0.0) {\n        return originalPoint;\n    }\n    float sin_t = sin(theta);\n    float cos_t = cos(theta);\n    vec2 v = (originalPoint - leftEyeCenter).xy;\n    float d = dot(v, vec2(cos_t, sin_t));\n    d = d * 0.3 * leftEyeMask * scalingFactor;\n    vec2 left = d * vec2(cos_t, sin_t);\n\n    v = (originalPoint - rightEyeCenter).xy;\n    d = dot(v, vec2(cos_t, sin_t));\n    d = d * 0.3 * rightEyeMask * scalingFactor;\n    vec2 right = d * vec2(cos_t, sin_t);\n    return vec3(originalPoint.xy+left+right, originalPoint.z);\n}\nvoid main() {\n    const float pi = 3.1415926;\n    //faceIndex;\n    float leftEyeFineMask     = getLeftEyeFineMask(position.xy);\n    float rightEyeFineMask    = getRightEyeFineMask(position.xy);\n    float leftEyeCoarseMask   = getLeftEyeCoarseMask(position.xy);\n    float rightEyeCoarseMask  = getRightEyeCoarseMask(position.xy);\n    vec3 displacedEyesPoint   = position.xyz;\n        //textureCoordinate = vec2(leftEyeFineMask+rightEyeFineMask);\n        //gl_Position = vec4(position.x*2.0-1.0, position.y*2.0-1.0, 0.0, 1.0);\n        //return;\n    // width\n    vec3 kEyesWidthFactors = vec3(1.3*cos(angles.z), -1.3*sin(angles.z), 1.0);\n    //vec3 kEyesWidthFactors = vec3(1.3, 1.0, 1.0);\n    displacedEyesPoint = getScaledEyesPoint2(displacedEyesPoint, eyesWidth, angles.z, leftEyeFineMask, rightEyeFineMask);\n\n    // height\n    const vec3 kEyesHeightFactors = vec3(1.0, 1.3, 1.0);\n    displacedEyesPoint = getScaledEyesPoint2(displacedEyesPoint, eyesHeight, pi/2.0 + angles.z, leftEyeFineMask, rightEyeFineMask);\n\n    // all size\n    const vec3 kEyesSizeFactors = vec3(1.4, 1.4, 1.0);\n    displacedEyesPoint = getScaledEyesPoint(displacedEyesPoint, kEyesSizeFactors, eyesSize, leftEyeFineMask, rightEyeFineMask);\n\n    // rotate\n    vec2 leftEye2DTiltPoint = leftEyeCenter.xy + rotate2DPoint(displacedEyesPoint.xy - leftEyeCenter.xy, -eyesTiltAngle);\n    displacedEyesPoint = mix(displacedEyesPoint, vec3(leftEye2DTiltPoint, displacedEyesPoint.z), leftEyeCoarseMask);\n    vec2 rightEye2DTiltPoint = rightEyeCenter.xy + rotate2DPoint(displacedEyesPoint.xy - rightEyeCenter.xy, eyesTiltAngle);\n    displacedEyesPoint = mix(displacedEyesPoint, vec3(rightEye2DTiltPoint, displacedEyesPoint.z), rightEyeCoarseMask);\n\n    // distance\n    vec2 eyesDistanceFactors = getEyesDistanceFactors2();\n    vec3 leftEyeDistancePoint = vec3(displacedEyesPoint.xy + eyesDistance * eyesDistanceFactors, displacedEyesPoint.z);\n    displacedEyesPoint = mix(displacedEyesPoint, leftEyeDistancePoint, leftEyeCoarseMask);\n    vec3 rightEyeDistancePoint = vec3(displacedEyesPoint.xy - eyesDistance * eyesDistanceFactors, displacedEyesPoint.z);\n    displacedEyesPoint = mix(displacedEyesPoint, rightEyeDistancePoint, rightEyeCoarseMask);\n\n    vec2 originalPosition = (vec4(position.xyz, 1.0)).xy;\n    vec2 displacedPosition = (vec4(displacedEyesPoint, 1.0)).xy;\n    textureCoordinate = displacedPosition;\n    gl_Position = vec4(originalPosition.x*2.0-1.0, originalPosition.y*2.0-1.0, 0.0, 1.0);\n    //if(leftEyeFineMask > 0.0 || rightEyeFineMask > 0.0) {\n    //    textureCoordinate = vec2(1.0, 0.0);\n    //} else {\n    //    textureCoordinate = vec2(0.0, 0.0);\n    //}\n}";
  public static final String VERTEX_SHADER_VTF = "precision highp float;\n//uniform mat4 projection;\n//uniform mat4 faceFrame;\n//uniform mat4 stableToImage;\nuniform vec2 leftEyePlainSize;\nuniform vec3 leftEyeCenter;\nuniform vec2 rightEyePlainSize;\nuniform vec3 rightEyeCenter;\nuniform float eyesSize; // it is eye size adjust factor\nuniform float eyesWidth; // it is eye width adjust factor\nuniform float eyesHeight; // it is eye height adjust factor\nuniform float eyesTiltAngle; // rotate angle need to apply\nuniform float eyesDistance;\nattribute vec4 position;\n//attribute float faceIndex;\n//attribute float depthValue;\nvarying vec2 textureCoordinate;\nuniform vec3 angles; // angles.x: pitch, angles.y: yaw, angles.z: roll\nuniform vec2 size;\n\nuniform sampler2D inputImageTexture;\n\nfloat my_smoothstep(float edge0, float edge1, float x) {\n    float t = clamp((x - edge0) / (edge1 - edge0), 0.0, 1.0);\n    return t * t * (3.0 - 2.0 * t);\n}\n\nfloat getElipseMask(in vec2 sigmaScaling, in vec2 point,in vec2 center, in vec2 boundingSize, float a1, float a2) {\n    // un-normalization\n    boundingSize = boundingSize * size;\n    point = point * size;\n    center = center * size;\n\n    float cos_t = cos(angles.z);\n    float sin_t = sin(angles.z);\n    vec2 translate = (point - center);\n    // rotate and scale\n    vec2 v = vec2(dot(translate, vec2(cos_t, sin_t)), dot(translate, vec2(-sin_t, cos_t))) * sigmaScaling;\n\n    float d2 = sqrt(dot(v / boundingSize, v / boundingSize));\n\n    return 1.0 - my_smoothstep(a1, a2, d2);\n}\n\nfloat getLeftEyeFineMask(in vec2 point) {\n    const vec2 sigmaScaling = vec2(1.25, 0.7);\n    return getElipseMask(sigmaScaling, point, leftEyeCenter.xy, leftEyePlainSize, 0.5, 1.2);\n}\nfloat getRightEyeFineMask(in vec2 point) {\n    const vec2 sigmaScaling = vec2(1.25, 0.7);\n    return getElipseMask(sigmaScaling, point, rightEyeCenter.xy, rightEyePlainSize, 0.5, 1.2);\n}\nfloat getLeftEyeCoarseMask(in vec2 point) {\n    const vec2 sigmaScaling = vec2(0.9, 0.8);\n    return getElipseMask(sigmaScaling, point, leftEyeCenter.xy, leftEyePlainSize, 0.7, 1.1);\n}\nfloat getRightEyeCoarseMask(in vec2 point) {\n    const vec2 sigmaScaling = vec2(0.9, 0.8);\n    return getElipseMask(sigmaScaling, point, rightEyeCenter.xy, rightEyePlainSize, 0.7, 1.1);\n}\nvec2 rotate2DPoint(vec2 point, float angle) {\n    return vec2(cos(angle) * point.x - sin(angle) * point.y, sin(angle) * point.x + cos(angle) * point.y);\n}\nvec3 getScaledEyesPoint(vec3 originalPoint, vec3 scalingFactors,float scalingFactor,float leftEyeMask, float rightEyeMask) {\n    if (scalingFactor == 0.0) {\n        return originalPoint;\n    }\n    vec3 eyesScaledPoint = originalPoint;\n    vec3 leftEyeScaledPoint = leftEyeCenter + scalingFactors * (originalPoint - leftEyeCenter);\n    eyesScaledPoint = mix(eyesScaledPoint, leftEyeScaledPoint, leftEyeMask);\n    vec3 rightEyeScaledPoint = rightEyeCenter + scalingFactors * (originalPoint - rightEyeCenter);\n    eyesScaledPoint = mix(eyesScaledPoint, rightEyeScaledPoint, rightEyeMask);\n    return mix(originalPoint, eyesScaledPoint, scalingFactor);\n}\nvec2 getEyesDistanceFactors() {\n    const float kEyesDistanceXRatio = 0.03662283339;\n    return vec2(abs(kEyesDistanceXRatio * (leftEyeCenter - rightEyeCenter).x), 0.0);\n}\nvec2 getEyesDistanceFactors2() {\n    const float kEyesDistanceXRatio = 0.03662283339;\n    return kEyesDistanceXRatio * vec2(leftEyeCenter.x - rightEyeCenter.x, leftEyeCenter.y - rightEyeCenter.y);\n}\n\nvec3 getScaledEyesPoint2(vec3 originalPoint, float scalingFactor, float theta, float leftEyeMask, float rightEyeMask) {\n    if (scalingFactor == 0.0) {\n        return originalPoint;\n    }\n    float sin_t = sin(theta);\n    float cos_t = cos(theta);\n    vec2 v = (originalPoint - leftEyeCenter).xy;\n    float d = dot(v, vec2(cos_t, sin_t));\n    d = d * 0.3 * leftEyeMask * scalingFactor;\n    vec2 left = d * vec2(cos_t, sin_t);\n\n    v = (originalPoint - rightEyeCenter).xy;\n    d = dot(v, vec2(cos_t, sin_t));\n    d = d * 0.3 * rightEyeMask * scalingFactor;\n    vec2 right = d * vec2(cos_t, sin_t);\n    return vec3(originalPoint.xy+left+right, originalPoint.z);\n}\nvoid main() {\n    const float pi = 3.1415926;\n    //faceIndex;\n    float leftEyeFineMask     = getLeftEyeFineMask(position.xy);\n    float rightEyeFineMask    = getRightEyeFineMask(position.xy);\n    float leftEyeCoarseMask   = getLeftEyeCoarseMask(position.xy);\n    float rightEyeCoarseMask  = getRightEyeCoarseMask(position.xy);\n    vec3 displacedEyesPoint   = position.xyz;\n        //textureCoordinate = vec2(leftEyeFineMask+rightEyeFineMask);\n        //gl_Position = vec4(position.x*2.0-1.0, position.y*2.0-1.0, 0.0, 1.0);\n        //return;\n    // width\n    vec3 kEyesWidthFactors = vec3(1.3*cos(angles.z), -1.3*sin(angles.z), 1.0);\n    //vec3 kEyesWidthFactors = vec3(1.3, 1.0, 1.0);\n    displacedEyesPoint = getScaledEyesPoint2(displacedEyesPoint, eyesWidth, angles.z, leftEyeFineMask, rightEyeFineMask);\n\n    // height\n    const vec3 kEyesHeightFactors = vec3(1.0, 1.3, 1.0);\n    displacedEyesPoint = getScaledEyesPoint2(displacedEyesPoint, eyesHeight, pi/2.0 + angles.z, leftEyeFineMask, rightEyeFineMask);\n\n    // all size\n    const vec3 kEyesSizeFactors = vec3(1.4, 1.4, 1.0);\n    displacedEyesPoint = getScaledEyesPoint(displacedEyesPoint, kEyesSizeFactors, eyesSize, leftEyeFineMask, rightEyeFineMask);\n\n    // rotate\n    vec2 leftEye2DTiltPoint = leftEyeCenter.xy + rotate2DPoint(displacedEyesPoint.xy - leftEyeCenter.xy, -eyesTiltAngle);\n    displacedEyesPoint = mix(displacedEyesPoint, vec3(leftEye2DTiltPoint, displacedEyesPoint.z), leftEyeCoarseMask);\n    vec2 rightEye2DTiltPoint = rightEyeCenter.xy + rotate2DPoint(displacedEyesPoint.xy - rightEyeCenter.xy, eyesTiltAngle);\n    displacedEyesPoint = mix(displacedEyesPoint, vec3(rightEye2DTiltPoint, displacedEyesPoint.z), rightEyeCoarseMask);\n\n    // distance\n    vec2 eyesDistanceFactors = getEyesDistanceFactors2();\n    vec3 leftEyeDistancePoint = vec3(displacedEyesPoint.xy + eyesDistance * eyesDistanceFactors, displacedEyesPoint.z);\n    displacedEyesPoint = mix(displacedEyesPoint, leftEyeDistancePoint, leftEyeCoarseMask);\n    vec3 rightEyeDistancePoint = vec3(displacedEyesPoint.xy - eyesDistance * eyesDistanceFactors, displacedEyesPoint.z);\n    displacedEyesPoint = mix(displacedEyesPoint, rightEyeDistancePoint, rightEyeCoarseMask);\n\n    vec2 originalPosition = (vec4(position.xyz, 1.0)).xy;\n    vec2 displacedPosition = (vec4(displacedEyesPoint, 1.0)).xy;\n    textureCoordinate = displacedPosition - originalPosition;\n\n    gl_Position = vec4(originalPosition.x*2.0-1.0, originalPosition.y*2.0-1.0, 0.0, 1.0);\n    //if(leftEyeFineMask > 0.0 || rightEyeFineMask > 0.0) {\n    //    textureCoordinate = vec2(1.0, 0.0);\n    //} else {\n    //    textureCoordinate = vec2(0.0, 0.0);\n    //}\n}";
  private static final int XCOORD_NUM = 128;
  private static final int YCOORD_NUM = 128;
  private static List<PointF> mFullscreenVerticesPortrait = VideoMaterialUtil.genFullScreenVertices(128, 128, 0.0F, 1.0F, 0.0F, 1.0F);
  private static List<PointF> mInitTextureCoordinatesPortrait = VideoMaterialUtil.genFullScreenVertices(128, 128, 0.0F, 1.0F, 0.0F, 1.0F);
  private float[] angles = { 0.0F, 0.0F, 0.0F };
  private float eyesDistance = 1.0F;
  private float eyesHeight = 0.0F;
  private float eyesSize = 0.1F;
  private float eyesTiltAngle = 0.0F;
  private float eyesWidth = 0.0F;
  private float[] leftEyeCenter = { 0.0F, 0.0F, 0.0F };
  private float[] leftEyePlainSize = { 0.0F, 0.0F };
  private float meshType = 0.0F;
  private float[] rightEyeCenter = { 0.0F, 0.0F, 0.0F };
  private float[] rightEyePlainSize = { 0.0F, 0.0F };
  private float[] size = { 1.0F, 1.0F };
  
  public ReshapeEyeFilter(ReshapeType paramReshapeType)
  {
    super("precision highp float;\n//uniform mat4 projection;\n//uniform mat4 faceFrame;\n//uniform mat4 stableToImage;\nuniform vec2 leftEyePlainSize;\nuniform vec3 leftEyeCenter;\nuniform vec2 rightEyePlainSize;\nuniform vec3 rightEyeCenter;\nuniform float eyesSize; // it is eye size adjust factor\nuniform float eyesWidth; // it is eye width adjust factor\nuniform float eyesHeight; // it is eye height adjust factor\nuniform float eyesTiltAngle; // rotate angle need to apply\nuniform float eyesDistance;\nattribute vec4 position;\n//attribute float faceIndex;\n//attribute float depthValue;\nvarying vec2 textureCoordinate;\nuniform vec3 angles; // angles.x: pitch, angles.y: yaw, angles.z: roll\nuniform vec2 size;\n\nuniform sampler2D inputImageTexture;\n\nfloat my_smoothstep(float edge0, float edge1, float x) {\n    float t = clamp((x - edge0) / (edge1 - edge0), 0.0, 1.0);\n    return t * t * (3.0 - 2.0 * t);\n}\n\nfloat getElipseMask(in vec2 sigmaScaling, in vec2 point,in vec2 center, in vec2 boundingSize, float a1, float a2) {\n    // un-normalization\n    boundingSize = boundingSize * size;\n    point = point * size;\n    center = center * size;\n\n    float cos_t = cos(angles.z);\n    float sin_t = sin(angles.z);\n    vec2 translate = (point - center);\n    // rotate and scale\n    vec2 v = vec2(dot(translate, vec2(cos_t, sin_t)), dot(translate, vec2(-sin_t, cos_t))) * sigmaScaling;\n\n    float d2 = sqrt(dot(v / boundingSize, v / boundingSize));\n\n    return 1.0 - my_smoothstep(a1, a2, d2);\n}\n\nfloat getLeftEyeFineMask(in vec2 point) {\n    const vec2 sigmaScaling = vec2(1.25, 0.7);\n    return getElipseMask(sigmaScaling, point, leftEyeCenter.xy, leftEyePlainSize, 0.5, 1.2);\n}\nfloat getRightEyeFineMask(in vec2 point) {\n    const vec2 sigmaScaling = vec2(1.25, 0.7);\n    return getElipseMask(sigmaScaling, point, rightEyeCenter.xy, rightEyePlainSize, 0.5, 1.2);\n}\nfloat getLeftEyeCoarseMask(in vec2 point) {\n    const vec2 sigmaScaling = vec2(0.9, 0.8);\n    return getElipseMask(sigmaScaling, point, leftEyeCenter.xy, leftEyePlainSize, 0.7, 1.1);\n}\nfloat getRightEyeCoarseMask(in vec2 point) {\n    const vec2 sigmaScaling = vec2(0.9, 0.8);\n    return getElipseMask(sigmaScaling, point, rightEyeCenter.xy, rightEyePlainSize, 0.7, 1.1);\n}\nvec2 rotate2DPoint(vec2 point, float angle) {\n    return vec2(cos(angle) * point.x - sin(angle) * point.y, sin(angle) * point.x + cos(angle) * point.y);\n}\nvec3 getScaledEyesPoint(vec3 originalPoint, vec3 scalingFactors,float scalingFactor,float leftEyeMask, float rightEyeMask) {\n    if (scalingFactor == 0.0) {\n        return originalPoint;\n    }\n    vec3 eyesScaledPoint = originalPoint;\n    vec3 leftEyeScaledPoint = leftEyeCenter + scalingFactors * (originalPoint - leftEyeCenter);\n    eyesScaledPoint = mix(eyesScaledPoint, leftEyeScaledPoint, leftEyeMask);\n    vec3 rightEyeScaledPoint = rightEyeCenter + scalingFactors * (originalPoint - rightEyeCenter);\n    eyesScaledPoint = mix(eyesScaledPoint, rightEyeScaledPoint, rightEyeMask);\n    return mix(originalPoint, eyesScaledPoint, scalingFactor);\n}\nvec2 getEyesDistanceFactors() {\n    const float kEyesDistanceXRatio = 0.03662283339;\n    return vec2(abs(kEyesDistanceXRatio * (leftEyeCenter - rightEyeCenter).x), 0.0);\n}\nvec2 getEyesDistanceFactors2() {\n    const float kEyesDistanceXRatio = 0.03662283339;\n    return kEyesDistanceXRatio * vec2(leftEyeCenter.x - rightEyeCenter.x, leftEyeCenter.y - rightEyeCenter.y);\n}\n\nvec3 getScaledEyesPoint2(vec3 originalPoint, float scalingFactor, float theta, float leftEyeMask, float rightEyeMask) {\n    if (scalingFactor == 0.0) {\n        return originalPoint;\n    }\n    float sin_t = sin(theta);\n    float cos_t = cos(theta);\n    vec2 v = (originalPoint - leftEyeCenter).xy;\n    float d = dot(v, vec2(cos_t, sin_t));\n    d = d * 0.3 * leftEyeMask * scalingFactor;\n    vec2 left = d * vec2(cos_t, sin_t);\n\n    v = (originalPoint - rightEyeCenter).xy;\n    d = dot(v, vec2(cos_t, sin_t));\n    d = d * 0.3 * rightEyeMask * scalingFactor;\n    vec2 right = d * vec2(cos_t, sin_t);\n    return vec3(originalPoint.xy+left+right, originalPoint.z);\n}\nvoid main() {\n    const float pi = 3.1415926;\n    //faceIndex;\n    float leftEyeFineMask     = getLeftEyeFineMask(position.xy);\n    float rightEyeFineMask    = getRightEyeFineMask(position.xy);\n    float leftEyeCoarseMask   = getLeftEyeCoarseMask(position.xy);\n    float rightEyeCoarseMask  = getRightEyeCoarseMask(position.xy);\n    vec3 displacedEyesPoint   = position.xyz;\n        //textureCoordinate = vec2(leftEyeFineMask+rightEyeFineMask);\n        //gl_Position = vec4(position.x*2.0-1.0, position.y*2.0-1.0, 0.0, 1.0);\n        //return;\n    // width\n    vec3 kEyesWidthFactors = vec3(1.3*cos(angles.z), -1.3*sin(angles.z), 1.0);\n    //vec3 kEyesWidthFactors = vec3(1.3, 1.0, 1.0);\n    displacedEyesPoint = getScaledEyesPoint2(displacedEyesPoint, eyesWidth, angles.z, leftEyeFineMask, rightEyeFineMask);\n\n    // height\n    const vec3 kEyesHeightFactors = vec3(1.0, 1.3, 1.0);\n    displacedEyesPoint = getScaledEyesPoint2(displacedEyesPoint, eyesHeight, pi/2.0 + angles.z, leftEyeFineMask, rightEyeFineMask);\n\n    // all size\n    const vec3 kEyesSizeFactors = vec3(1.4, 1.4, 1.0);\n    displacedEyesPoint = getScaledEyesPoint(displacedEyesPoint, kEyesSizeFactors, eyesSize, leftEyeFineMask, rightEyeFineMask);\n\n    // rotate\n    vec2 leftEye2DTiltPoint = leftEyeCenter.xy + rotate2DPoint(displacedEyesPoint.xy - leftEyeCenter.xy, -eyesTiltAngle);\n    displacedEyesPoint = mix(displacedEyesPoint, vec3(leftEye2DTiltPoint, displacedEyesPoint.z), leftEyeCoarseMask);\n    vec2 rightEye2DTiltPoint = rightEyeCenter.xy + rotate2DPoint(displacedEyesPoint.xy - rightEyeCenter.xy, eyesTiltAngle);\n    displacedEyesPoint = mix(displacedEyesPoint, vec3(rightEye2DTiltPoint, displacedEyesPoint.z), rightEyeCoarseMask);\n\n    // distance\n    vec2 eyesDistanceFactors = getEyesDistanceFactors2();\n    vec3 leftEyeDistancePoint = vec3(displacedEyesPoint.xy + eyesDistance * eyesDistanceFactors, displacedEyesPoint.z);\n    displacedEyesPoint = mix(displacedEyesPoint, leftEyeDistancePoint, leftEyeCoarseMask);\n    vec3 rightEyeDistancePoint = vec3(displacedEyesPoint.xy - eyesDistance * eyesDistanceFactors, displacedEyesPoint.z);\n    displacedEyesPoint = mix(displacedEyesPoint, rightEyeDistancePoint, rightEyeCoarseMask);\n\n    vec2 originalPosition = (vec4(position.xyz, 1.0)).xy;\n    vec2 displacedPosition = (vec4(displacedEyesPoint, 1.0)).xy;\n    textureCoordinate = displacedPosition;\n    gl_Position = vec4(originalPosition.x*2.0-1.0, originalPosition.y*2.0-1.0, 0.0, 1.0);\n    //if(leftEyeFineMask > 0.0 || rightEyeFineMask > 0.0) {\n    //    textureCoordinate = vec2(1.0, 0.0);\n    //} else {\n    //    textureCoordinate = vec2(0.0, 0.0);\n    //}\n}", "#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float; //支持高精度，限定浮点型为高精度\n#else\n    precision mediump float; //不支持高精度，限定浮点型为中精度\n#endif\n\nvarying vec2 textureCoordinate;\nuniform sampler2D inputImageTexture;\nvoid main()\n{\n    //gl_FragColor = vec4(inputTextureCoordinate.xy, vec2(0.0, 1.0));\n\n    //vec4 color = vec4(textureCoordinate.x*8.0+0.5, textureCoordinate.y*8.0+0.5, 0.5, 1.0);\n    //gl_FragColor = color;\n\n    //gl_FragColor = vec4(textureCoordinate, textureCoordinate.x, 1.0);\n\n    gl_FragColor = texture2D(inputImageTexture, textureCoordinate);\n}");
    if (paramReshapeType == ReshapeType.VTF) {
      updateFilterShader("precision highp float;\n//uniform mat4 projection;\n//uniform mat4 faceFrame;\n//uniform mat4 stableToImage;\nuniform vec2 leftEyePlainSize;\nuniform vec3 leftEyeCenter;\nuniform vec2 rightEyePlainSize;\nuniform vec3 rightEyeCenter;\nuniform float eyesSize; // it is eye size adjust factor\nuniform float eyesWidth; // it is eye width adjust factor\nuniform float eyesHeight; // it is eye height adjust factor\nuniform float eyesTiltAngle; // rotate angle need to apply\nuniform float eyesDistance;\nattribute vec4 position;\n//attribute float faceIndex;\n//attribute float depthValue;\nvarying vec2 textureCoordinate;\nuniform vec3 angles; // angles.x: pitch, angles.y: yaw, angles.z: roll\nuniform vec2 size;\n\nuniform sampler2D inputImageTexture;\n\nfloat my_smoothstep(float edge0, float edge1, float x) {\n    float t = clamp((x - edge0) / (edge1 - edge0), 0.0, 1.0);\n    return t * t * (3.0 - 2.0 * t);\n}\n\nfloat getElipseMask(in vec2 sigmaScaling, in vec2 point,in vec2 center, in vec2 boundingSize, float a1, float a2) {\n    // un-normalization\n    boundingSize = boundingSize * size;\n    point = point * size;\n    center = center * size;\n\n    float cos_t = cos(angles.z);\n    float sin_t = sin(angles.z);\n    vec2 translate = (point - center);\n    // rotate and scale\n    vec2 v = vec2(dot(translate, vec2(cos_t, sin_t)), dot(translate, vec2(-sin_t, cos_t))) * sigmaScaling;\n\n    float d2 = sqrt(dot(v / boundingSize, v / boundingSize));\n\n    return 1.0 - my_smoothstep(a1, a2, d2);\n}\n\nfloat getLeftEyeFineMask(in vec2 point) {\n    const vec2 sigmaScaling = vec2(1.25, 0.7);\n    return getElipseMask(sigmaScaling, point, leftEyeCenter.xy, leftEyePlainSize, 0.5, 1.2);\n}\nfloat getRightEyeFineMask(in vec2 point) {\n    const vec2 sigmaScaling = vec2(1.25, 0.7);\n    return getElipseMask(sigmaScaling, point, rightEyeCenter.xy, rightEyePlainSize, 0.5, 1.2);\n}\nfloat getLeftEyeCoarseMask(in vec2 point) {\n    const vec2 sigmaScaling = vec2(0.9, 0.8);\n    return getElipseMask(sigmaScaling, point, leftEyeCenter.xy, leftEyePlainSize, 0.7, 1.1);\n}\nfloat getRightEyeCoarseMask(in vec2 point) {\n    const vec2 sigmaScaling = vec2(0.9, 0.8);\n    return getElipseMask(sigmaScaling, point, rightEyeCenter.xy, rightEyePlainSize, 0.7, 1.1);\n}\nvec2 rotate2DPoint(vec2 point, float angle) {\n    return vec2(cos(angle) * point.x - sin(angle) * point.y, sin(angle) * point.x + cos(angle) * point.y);\n}\nvec3 getScaledEyesPoint(vec3 originalPoint, vec3 scalingFactors,float scalingFactor,float leftEyeMask, float rightEyeMask) {\n    if (scalingFactor == 0.0) {\n        return originalPoint;\n    }\n    vec3 eyesScaledPoint = originalPoint;\n    vec3 leftEyeScaledPoint = leftEyeCenter + scalingFactors * (originalPoint - leftEyeCenter);\n    eyesScaledPoint = mix(eyesScaledPoint, leftEyeScaledPoint, leftEyeMask);\n    vec3 rightEyeScaledPoint = rightEyeCenter + scalingFactors * (originalPoint - rightEyeCenter);\n    eyesScaledPoint = mix(eyesScaledPoint, rightEyeScaledPoint, rightEyeMask);\n    return mix(originalPoint, eyesScaledPoint, scalingFactor);\n}\nvec2 getEyesDistanceFactors() {\n    const float kEyesDistanceXRatio = 0.03662283339;\n    return vec2(abs(kEyesDistanceXRatio * (leftEyeCenter - rightEyeCenter).x), 0.0);\n}\nvec2 getEyesDistanceFactors2() {\n    const float kEyesDistanceXRatio = 0.03662283339;\n    return kEyesDistanceXRatio * vec2(leftEyeCenter.x - rightEyeCenter.x, leftEyeCenter.y - rightEyeCenter.y);\n}\n\nvec3 getScaledEyesPoint2(vec3 originalPoint, float scalingFactor, float theta, float leftEyeMask, float rightEyeMask) {\n    if (scalingFactor == 0.0) {\n        return originalPoint;\n    }\n    float sin_t = sin(theta);\n    float cos_t = cos(theta);\n    vec2 v = (originalPoint - leftEyeCenter).xy;\n    float d = dot(v, vec2(cos_t, sin_t));\n    d = d * 0.3 * leftEyeMask * scalingFactor;\n    vec2 left = d * vec2(cos_t, sin_t);\n\n    v = (originalPoint - rightEyeCenter).xy;\n    d = dot(v, vec2(cos_t, sin_t));\n    d = d * 0.3 * rightEyeMask * scalingFactor;\n    vec2 right = d * vec2(cos_t, sin_t);\n    return vec3(originalPoint.xy+left+right, originalPoint.z);\n}\nvoid main() {\n    const float pi = 3.1415926;\n    //faceIndex;\n    float leftEyeFineMask     = getLeftEyeFineMask(position.xy);\n    float rightEyeFineMask    = getRightEyeFineMask(position.xy);\n    float leftEyeCoarseMask   = getLeftEyeCoarseMask(position.xy);\n    float rightEyeCoarseMask  = getRightEyeCoarseMask(position.xy);\n    vec3 displacedEyesPoint   = position.xyz;\n        //textureCoordinate = vec2(leftEyeFineMask+rightEyeFineMask);\n        //gl_Position = vec4(position.x*2.0-1.0, position.y*2.0-1.0, 0.0, 1.0);\n        //return;\n    // width\n    vec3 kEyesWidthFactors = vec3(1.3*cos(angles.z), -1.3*sin(angles.z), 1.0);\n    //vec3 kEyesWidthFactors = vec3(1.3, 1.0, 1.0);\n    displacedEyesPoint = getScaledEyesPoint2(displacedEyesPoint, eyesWidth, angles.z, leftEyeFineMask, rightEyeFineMask);\n\n    // height\n    const vec3 kEyesHeightFactors = vec3(1.0, 1.3, 1.0);\n    displacedEyesPoint = getScaledEyesPoint2(displacedEyesPoint, eyesHeight, pi/2.0 + angles.z, leftEyeFineMask, rightEyeFineMask);\n\n    // all size\n    const vec3 kEyesSizeFactors = vec3(1.4, 1.4, 1.0);\n    displacedEyesPoint = getScaledEyesPoint(displacedEyesPoint, kEyesSizeFactors, eyesSize, leftEyeFineMask, rightEyeFineMask);\n\n    // rotate\n    vec2 leftEye2DTiltPoint = leftEyeCenter.xy + rotate2DPoint(displacedEyesPoint.xy - leftEyeCenter.xy, -eyesTiltAngle);\n    displacedEyesPoint = mix(displacedEyesPoint, vec3(leftEye2DTiltPoint, displacedEyesPoint.z), leftEyeCoarseMask);\n    vec2 rightEye2DTiltPoint = rightEyeCenter.xy + rotate2DPoint(displacedEyesPoint.xy - rightEyeCenter.xy, eyesTiltAngle);\n    displacedEyesPoint = mix(displacedEyesPoint, vec3(rightEye2DTiltPoint, displacedEyesPoint.z), rightEyeCoarseMask);\n\n    // distance\n    vec2 eyesDistanceFactors = getEyesDistanceFactors2();\n    vec3 leftEyeDistancePoint = vec3(displacedEyesPoint.xy + eyesDistance * eyesDistanceFactors, displacedEyesPoint.z);\n    displacedEyesPoint = mix(displacedEyesPoint, leftEyeDistancePoint, leftEyeCoarseMask);\n    vec3 rightEyeDistancePoint = vec3(displacedEyesPoint.xy - eyesDistance * eyesDistanceFactors, displacedEyesPoint.z);\n    displacedEyesPoint = mix(displacedEyesPoint, rightEyeDistancePoint, rightEyeCoarseMask);\n\n    vec2 originalPosition = (vec4(position.xyz, 1.0)).xy;\n    vec2 displacedPosition = (vec4(displacedEyesPoint, 1.0)).xy;\n    textureCoordinate = displacedPosition - originalPosition;\n\n    gl_Position = vec4(originalPosition.x*2.0-1.0, originalPosition.y*2.0-1.0, 0.0, 1.0);\n    //if(leftEyeFineMask > 0.0 || rightEyeFineMask > 0.0) {\n    //    textureCoordinate = vec2(1.0, 0.0);\n    //} else {\n    //    textureCoordinate = vec2(0.0, 0.0);\n    //}\n}", "#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float; //支持高精度，限定浮点型为高精度\n#else\n    precision mediump float; //不支持高精度，限定浮点型为中精度\n#endif\n\nvarying vec2 textureCoordinate;\nuniform sampler2D inputImageTexture;\nvoid main()\n{\n\n    //vec2 diffPosition = textureCoordinate;\n    //float ddx = (diffPosition.x + 1.0) / 2.0;\n    //float ddy = (diffPosition.y + 1.0) / 2.0;\n    //diffPosition = vec2(ddx,ddy);\n    //vec2 a = fract(diffPosition * 255.0 / 256.0);\n    //vec2 b = fract(diffPosition * 255.0 * 255.0 / 256.0);\n    //gl_FragColor = vec4(a,b);\n\n    // 新版的 shader 颜色通道中记录的是位移偏移量，只有在最后 combinedFilter 才最终将所有 filter 的位移量叠加，去图上取点。这样的好处是：\n    // 1. 只有 128 * 128 个点\n    // 2. smoothstep 会更平滑，128 * 128 个点取插值，原来的处理方法会使像素点变模糊\n    // 3. 两个矩形交叠的地方，位移处理的先后顺序不影响结果（不能说这是好还是坏，因为 PS 的液化是作用在原图上的）\n\n    // 至于此处要改为 * 255 再 / 255 是为了提升精度（浮点纹理 iOS 不支持，而一个字节只能表示 256 个不同值）\n    // 本来小奇使用了浮点纹理，但是发现有机型不支持，不用浮点纹理又精度不够，所以采用这个方法，变成2个字节表示一个值，提升了精度。\n    vec2 diffPosition = textureCoordinate;\n    diffPosition = 0.5 * (diffPosition + 1.0) * 255.0;  // 0.5 * (diffPosition + 1.0) 是将(-1, 1)间的值转换到(0, 1)，\n    vec2 a = floor(diffPosition) / 255.0;\n    vec2 b = fract(diffPosition);\n    gl_FragColor = vec4(a, b);\n\n\n    //vec2 diffPosition = textureCoordinate;\n    //diffPosition = 0.5 * (diffPosition + 1.0) * 256.0;\n    //vec2 a = floor(diffPosition) / 256.0;\n    //vec2 b = fract(diffPosition);\n    //gl_FragColor = vec4(a, b);\n}\n");
    }
    if (paramReshapeType == ReshapeType.NORMAL) {
      f = 0.5F;
    }
    this.meshType = f;
    initParams();
  }
  
  public void ApplyGLSLFilter()
  {
    initParams();
    super.ApplyGLSLFilter();
    setDrawMode(AEOpenRenderConfig.DRAW_MODE.TRIANGLE_STRIP);
  }
  
  public void initAttribParams()
  {
    setPositions(VideoMaterialUtil.toFlatArray((PointF[])mFullscreenVerticesPortrait.toArray(new PointF[0])), false);
    setTexCords(VideoMaterialUtil.toFlatArray((PointF[])mInitTextureCoordinatesPortrait.toArray(new PointF[0])), false);
    setCoordNum(32897);
  }
  
  public void initParams()
  {
    addParam(new UniformParam.FloatsParam("leftEyePlainSize", this.leftEyePlainSize));
    addParam(new UniformParam.FloatsParam("leftEyeCenter", this.leftEyeCenter));
    addParam(new UniformParam.FloatsParam("rightEyePlainSize", this.rightEyePlainSize));
    addParam(new UniformParam.FloatsParam("rightEyeCenter", this.rightEyeCenter));
    addParam(new UniformParam.FloatParam("eyesSize", this.eyesSize));
    addParam(new UniformParam.FloatParam("eyesWidth", this.eyesWidth));
    addParam(new UniformParam.FloatParam("eyesHeight", this.eyesHeight));
    addParam(new UniformParam.FloatParam("eyesTiltAngle", this.eyesTiltAngle));
    addParam(new UniformParam.FloatParam("eyesDistance", this.eyesDistance));
    addParam(new UniformParam.FloatsParam("angles", this.angles));
    addParam(new UniformParam.FloatsParam("size", this.size));
    addParam(new UniformParam.FloatParam("meshType", this.meshType));
  }
  
  public void setParam(Map<String, Object> paramMap)
  {
    if (paramMap.containsKey("leftEyePlainSize")) {
      this.leftEyePlainSize = ((float[])paramMap.get("leftEyePlainSize"));
    }
    if (paramMap.containsKey("leftEyeCenter")) {
      this.leftEyeCenter = ((float[])paramMap.get("leftEyeCenter"));
    }
    if (paramMap.containsKey("rightEyePlainSize")) {
      this.rightEyePlainSize = ((float[])paramMap.get("rightEyePlainSize"));
    }
    if (paramMap.containsKey("rightEyeCenter")) {
      this.rightEyeCenter = ((float[])paramMap.get("rightEyeCenter"));
    }
    if (paramMap.containsKey("eyesWidth")) {
      this.eyesWidth = (((Float)paramMap.get("eyesWidth")).floatValue() * -0.008F);
    }
    if (paramMap.containsKey("eyesHeight")) {
      this.eyesHeight = (((Float)paramMap.get("eyesHeight")).floatValue() * -0.009F);
    }
    if (paramMap.containsKey("eyesSize")) {
      this.eyesSize = (((Float)paramMap.get("eyesSize")).floatValue() * -0.0075F);
    }
    if (paramMap.containsKey("eyesTiltAngle")) {
      this.eyesTiltAngle = (((Float)paramMap.get("eyesTiltAngle")).floatValue() * 0.001F);
    }
    if (paramMap.containsKey("eyesDistance"))
    {
      this.eyesDistance = (((Float)paramMap.get("eyesDistance")).floatValue() * 0.015F);
      if (this.eyesDistance > 0.0F) {
        this.eyesDistance *= 0.8F;
      }
    }
    if (paramMap.containsKey("angles")) {
      this.angles = ((float[])paramMap.get("angles"));
    }
    if (paramMap.containsKey("size")) {
      this.size = ((float[])paramMap.get("size"));
    }
    initParams();
  }
}


/* Location:           L:\local\mybackup\temp\qq_apk\com.tencent.tim\classes12.jar
 * Qualified Name:     com.tencent.ttpic.openapi.filter.ReshapeEyeFilter
 * JD-Core Version:    0.7.0.1
 */